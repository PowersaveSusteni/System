{"version":3,"file":"kendo.splitter.js","names":["__meta__","id","name","category","description","depends","$","kendo","window","ui","keys","extend","Widget","pxUnitsRegex","percentageUnitsRegex","NS","EXPAND","COLLAPSE","CONTENTLOAD","ERROR","LAYOUTCHANGE","PANE","FOCUSED","PANECLASS","KPANE","KSCROLLABLE","KSTATIC_PANE","SPLITTER","KSPLITBAR","PANE_SIZING_PROP","HORIZONTAL","VERTICAL","MAX_NUMBER_VALUE","Number","MAX_SAFE_INTEGER","CLICK","RESIZE","PX","isPercentageSize","size","test","isPixelSize","isFluid","calculateSize","total","output","parseInt","Math","floor","panePropertyAccessor","propertyName","triggersResize","pane","value","paneConfig","this","element","find","data","arguments","length","options","resize","Splitter","init","isHorizontal","that","fn","call","wrapper","orientation","toLowerCase","_dimension","_keys","decrease","LEFT","UP","increase","RIGHT","DOWN","_resizeStep","_marker","guid","substring","addClass","closest","removeClass","_initPanes","resizing","PaneResizing","triggerHandler","events","_addOverlays","_panes","append","_removeOverlays","children","remove","_attachEvents","on","_keydown","bind","e","currentTarget","focus","end","_togglePane","_arrowClick","document","_detachEvents","off","clickMoveClick","panes","destroy","key","keyCode","target","navigationKeys","ctrlKey","isResizing","_triggerAction","move","preventDefault","HOME","prev","collapse","END","expand","ENTER","panesConfig","each","i","nodeName","_getDefaultPaneConfig","order","style","_initPane","scrollable","resizable","_updatePaneOrderStyles","parentElement","config","fixedSize","attr","isStaticPane","collapsible","css","toggleClass","Boolean","ajaxRequest","url","contentUrl","isLocalUrl","jQuery","ajax","type","dataType","success","html","trigger","error","xhr","status","shouldExecute","collapsed","stop","arrow","is","next","arrowType","parent","_updateSplitBar","splitbar","previousPane","nextPane","previousPaneEl","catIconIf","actionType","iconType","condition","icon","draggable","prevCollapsible","prevCollapsed","nextCollapsible","nextCollapsed","previousPaneId","isRtl","support","leftIcon","rightIcon","labelId","label","removeAttr","_updateSplitBars","prevAll","first","nextAll","_removeSplitBars","_resetAriaValueNow","splitBars","panesSizes","valueNow","joinDimension","round","setAttribute","_resize","splitBarsCount","sizingProperty","totalSize","_suppressResize","slice","after","sizedPanesWidth","freeSizedPanes","collapsedSize","add","push","freeSizePanesCount","freeSizePaneWidth","eq","forEach","sizingDomProperty","lastNonCollapsedPane","filter","last","toggle","_addPane","idx","paneElement","splice","appendTo","insertBefore","referencePane","index","insertAfter","min","max","_getPaneElement","paneIndex","_getPaneElements","Array","from","x","hasClass","_dragSplitterBar","splitterBarIndex","delta","leftPane","rightPane","_getAdjacentPanes","leftPaneNewSize","computedSize","isLeftPaneSizeInBounds","panesWithoutSize","canResizeBothPanes","_resizePane","leftPaneIndex","rightPaneIndex","leftPaneELement","rightPaneELement","_getPane","leftPaneSize","_getPaneOffsetSize","rightPaneSize","totalPaneSize","splitterSize","_getElementClientSize","getPixelSize","paneSize","_calculatePixelSize","leftPaneMaxSize","rightPaneMaxSize","_getAdjacentPanesMaxSize","rightMaxPixelSize","leftMaxPixelSize","uid","constrainedSize","newSize","toPercentages","parseFloat","toPixel","_setPaneSize","_allExpandedPanesHaveSize","expandedPanes","_getPaneSizes","containerSize","numericSize","_getElementOffsetSize","rect","getBoundingClientRect","width","height","_getElementSize","sizeType","_getPaneIndex","indexOf","leftPaneMinSize","leftPaneMaxPixelSize","rightPaneMinSize","rightPaneMaxPixelSize","_getElementIndex","childrenSelector","matches","plugin","verticalDefaults","alternateSizingProperty","positioningProperty","mousePositioningProperty","horizontalDefaults","splitter","handle","owner","_element","_resizable","Resizable","hint","_createHint","start","_start","_max","_min","invalidClass","resizeend","_stop","prototype","press","pressed","offsetBoundaryProp","initialTarget","previousPaneConfig","nextPaneConfig","prevBoundary","nextBoundary","toPx","val","sender","cancel","prevMinSize","prevMaxSize","nextMinSize","nextMaxSize","_maxPosition","_minPosition","splitterBar","rtlModifier","y","ESC","initialDelta","splitbarPosition","position","left","top","ghostPosition","abs","kendo$1"],"sources":["kendo.splitter.js"],"mappings":"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","ignoreList":[],"sourcesContent":["import './kendo.resizable.js';\nimport './kendo.icons.js';\n\nconst __meta__ = {\n    id: \"splitter\",\n    name: \"Splitter\",\n    category: \"web\",\n    description: \"The Splitter widget provides an easy way to create a dynamic layout of resizable and collapsible panes.\",\n    depends: [\"resizable\", \"icons\"]\n};\n\n(function($, undefined$1) {\n    var kendo = window.kendo,\n        ui = kendo.ui,\n        keys = kendo.keys,\n        extend = $.extend,\n        Widget = ui.Widget,\n        pxUnitsRegex = /^\\d+(\\.\\d+)?px$/i,\n        percentageUnitsRegex = /^\\d+(\\.\\d+)?%$/i,\n        NS = \".kendoSplitter\",\n        EXPAND = \"expand\",\n        COLLAPSE = \"collapse\",\n        CONTENTLOAD = \"contentLoad\",\n        ERROR = \"error\",\n        RESIZE = \"resize\",\n        LAYOUTCHANGE = \"layoutChange\",\n        HORIZONTAL = \"horizontal\",\n        VERTICAL = \"vertical\",\n        MOUSEENTER = \"mouseenter\",\n        CLICK = \"click\",\n        PANE = \"pane\",\n        MOUSELEAVE = \"mouseleave\",\n        FOCUSED = \"k-focus\",\n        KPANE = \"k-\" + PANE,\n        PANECLASS = \".\" + KPANE,\n        KSCROLLABLE = \"k-scrollable\",\n        TABINDEX = \"tabindex\",\n        ARIA_VALUEMIN = \"aria-valuemin\",\n        ARIA_VALUEMAX = \"aria-valuemax\",\n        ARIA_VALUENOW = \"aria-valuenow\",\n        ARIA_CONTROLS = \"aria-controls\",\n        ARIA_LABEL = \"aria-label\",\n        ARIA_LABELLEDBY = \"aria-labelledby\",\n        ARIA_ORIENTATION = \"aria-orientation\",\n        KSTATIC_PANE = \"k-pane-static\",\n        SPLITTER = \"k-splitter\",\n        KSPLITBAR = \"k-splitbar\",\n        SPLITTER_FLEX = \"k-splitter-flex\",\n        PANE_SIZING_PROP = \"flex-basis\",\n        HORIZONTAL = \"horizontal\",\n        VERTICAL = \"vertical\",\n        KHIDDEN = \"k-hidden\",\n        MAX_NUMBER_VALUE = Number.MAX_SAFE_INTEGER,\n        KPANE = \"k-pane\",\n        KPANE_FLEX = \"k-pane-flex\",\n        CLICK = \"click\",\n        RESIZE = \"resize\",\n        PX = \"px\";\n\n    function isPercentageSize(size) {\n        return percentageUnitsRegex.test(size);\n    }\n\n    function isPixelSize(size) {\n        return pxUnitsRegex.test(size) || /^\\d+$/.test(size);\n    }\n\n    function isFluid(size) {\n        return !isPercentageSize(size) && !isPixelSize(size);\n    }\n\n    function calculateSize(size, total) {\n        var output = parseInt(size, 10);\n\n        if (isPercentageSize(size)) {\n            output = Math.floor(output * total / 100);\n        }\n\n        return output;\n    }\n\n    function panePropertyAccessor(propertyName, triggersResize) {\n        return function(pane, value) {\n            var paneConfig = this.element.find(pane).data(PANE);\n\n            if (arguments.length == 1) {\n                return paneConfig[propertyName];\n            }\n\n            paneConfig[propertyName] = value;\n\n            if (triggersResize) {\n                var splitter = this.element.data(\"kendo\" + this.options.name);\n                splitter.resize(true);\n            }\n        };\n    }\n\n    var Splitter = Widget.extend({\n        init: function(element, options) {\n            var that = this,\n                isHorizontal;\n\n            Widget.fn.init.call(that, element, options);\n\n            that.wrapper = that.element;\n\n            if (that.options.orientation) {\n                isHorizontal = that.options.orientation.toLowerCase() != VERTICAL;\n            }\n\n            that.orientation = isHorizontal ? HORIZONTAL : VERTICAL;\n            that._dimension = isHorizontal ? \"width\" : \"height\";\n            that._keys = {\n                decrease: isHorizontal ? keys.LEFT : keys.UP,\n                increase: isHorizontal ? keys.RIGHT : keys.DOWN\n            };\n\n            that._resizeStep = 10;\n\n            that._marker = kendo.guid().substring(0, 8);\n\n            that.element.addClass(`${SPLITTER} ${SPLITTER_FLEX} ${SPLITTER}-${that.orientation}`);\n            that.element.closest(KPANE).removeClass(KSTATIC_PANE).addClass(KPANE_FLEX);\n            that._initPanes();\n\n            that.resizing = new PaneResizing(that);\n\n            that.element.triggerHandler(\"init\" + NS);\n        },\n        events: [\n            EXPAND,\n            COLLAPSE,\n            CONTENTLOAD,\n            ERROR,\n            RESIZE,\n            LAYOUTCHANGE\n        ],\n\n        _addOverlays: function() {\n            this._panes().append(\"<div class='k-splitter-overlay k-overlay' />\");\n        },\n\n        _removeOverlays: function() {\n            this._panes().children(\".k-splitter-overlay\").remove();\n        },\n\n        _attachEvents: function() {\n            var that = this,\n                orientation = that.options.orientation;\n\n            // do not use delegated events to increase performance of nested elements\n            that.element\n                .children(\".k-splitbar-draggable-\" + orientation)\n                .on(\"keydown\" + NS, that._keydown.bind(that))\n                .on(\"mousedown\" + NS, function(e) { e.currentTarget.focus(); })\n                .on(\"focus\" + NS, function(e) { $(e.currentTarget).addClass(FOCUSED); })\n                .on(\"blur\" + NS, function(e) {\n                    $(e.currentTarget).removeClass(FOCUSED);\n                    if (that.resizing) {\n                        that.resizing.end();\n                    }\n                })\n                .on(MOUSEENTER + NS, function() { $(this).addClass(\"k-splitbar-\" + that.orientation + \"-hover\"); })\n                .on(MOUSELEAVE + NS, function() { $(this).removeClass(\"k-splitbar-\" + that.orientation + \"-hover\"); })\n                .on(\"mousedown\" + NS, that._addOverlays.bind(that))\n                .end()\n                .children(\".k-splitbar\")\n                .on(\"dblclick\" + NS, that._togglePane.bind(that))\n                .children(\".k-collapse-next, .k-collapse-prev\").on(CLICK + NS, that._arrowClick(COLLAPSE)).end()\n                .children(\".k-expand-next, .k-expand-prev\").on(CLICK + NS, that._arrowClick(EXPAND)).end()\n                .end();\n\n            $(window).on(\"resize\" + NS + that._marker, that.resize.bind(that, false));\n            $(document).on(\"mouseup\" + NS + that._marker, that._removeOverlays.bind(that));\n        },\n\n        _detachEvents: function() {\n            var that = this;\n\n            that.element\n                .children(\".k-splitbar-draggable-\" + that.orientation).off(NS).end()\n                .children(\".k-splitbar\").off(\"dblclick\" + NS)\n                .children(\".k-collapse-next, .k-collapse-prev, .k-expand-next, .k-expand-prev\").off(NS);\n\n            $(window).off(NS + that._marker);\n            $(document).off(NS + that._marker);\n        },\n\n        options: {\n            name: \"Splitter\",\n            clickMoveClick: true,\n            orientation: HORIZONTAL,\n            panes: []\n        },\n\n        destroy: function() {\n            Widget.fn.destroy.call(this);\n\n            this._detachEvents();\n\n            if (this.resizing) {\n                this.resizing.destroy();\n            }\n\n            kendo.destroy(this.element);\n\n            this.wrapper = this.element = null;\n        },\n\n        _keydown: function(e) {\n            var that = this,\n                key = e.keyCode,\n                resizing = that.resizing,\n                target = $(e.currentTarget),\n                navigationKeys = that._keys,\n                increase = key === navigationKeys.increase,\n                decrease = key === navigationKeys.decrease,\n                pane;\n\n            if (increase || decrease) {\n                if (e.ctrlKey) {\n                    pane = target[decrease ? \"next\" : \"prev\"]();\n\n                    if (resizing && resizing.isResizing()) {\n                        resizing.end();\n                    }\n\n                    if (!pane[that._dimension]()) {\n                        that._triggerAction(EXPAND, pane);\n                    } else {\n                        that._triggerAction(COLLAPSE, target[decrease ? \"prev\" : \"next\"]());\n                    }\n                } else if (resizing) {\n                    resizing.move((decrease ? -1 : 1) * that._resizeStep, target);\n                }\n                e.preventDefault();\n            } else if (key === keys.HOME) {\n                pane = target.prev();\n                that.collapse(pane);\n                e.preventDefault();\n            } else if (key === keys.END) {\n                pane = target.prev();\n                that.expand(pane);\n                e.preventDefault();\n            } else if (key === keys.ENTER && resizing) {\n                resizing.end();\n                e.preventDefault();\n\n                that._togglePane(e);\n            }\n        },\n\n        _initPanes: function() {\n            var panesConfig = this.options.panes || [];\n            var that = this;\n\n            this.element\n                .children()\n                .each(function(i, pane) {\n                    if (pane.nodeName.toLowerCase() != \"script\") {\n                        panesConfig[i] = $.extend(that._getDefaultPaneConfig(), panesConfig[i], { order: i * 2 });\n                        panesConfig[i].isFluid = isFluid(panesConfig[i].size);\n                        pane.style.order = i * 2;\n\n                        that._initPane(pane, panesConfig[i]);\n                    }\n                });\n\n            this.resize();\n        },\n        _getDefaultPaneConfig: function() {\n            return { scrollable: true, resizable: true, size: \"auto\" };\n        },\n        _updatePaneOrderStyles: function(parentElement) {\n            $(parentElement || this.element).children().each(function(i, pane) {\n                if (pane.nodeName.toLowerCase() != \"script\") {\n                    let paneConfig = pane.data(PANE);\n\n                    paneConfig.order = i * 2;\n                    pane.style.order = i * 2;\n                }\n            });\n        },\n        _initPane: function(pane, config) {\n            config = $.extend({}, this._getDefaultPaneConfig(), config);\n            config.fixedSize = config.size && config.size !== \"auto\";\n            pane = $(pane)\n                .attr(\"role\", \"group\")\n                .addClass(KPANE);\n\n            let isStaticPane = !config.resizable && !config.collapsible || config.fixedSize;\n\n            pane.css(PANE_SIZING_PROP, config.size)\n                .data(PANE, config)\n                .toggleClass(KSTATIC_PANE, Boolean(isStaticPane))\n                .toggleClass(KSCROLLABLE, Boolean(config.scrollable));\n\n            this.ajaxRequest(pane);\n        },\n\n        ajaxRequest: function(pane, url, data) {\n            var that = this,\n                paneConfig;\n\n            pane = that.element.find(pane);\n            paneConfig = pane.data(PANE);\n\n            url = url || paneConfig.contentUrl;\n\n            if (url) {\n                pane.append(\"<span class='k-icon k-i-loading k-pane-loading' />\");\n\n                if (kendo.isLocalUrl(url)) {\n                    jQuery.ajax({\n                        url: url,\n                        data: data || {},\n                        type: \"GET\",\n                        dataType: \"html\",\n                        success: function(data) {\n                            pane.html(data);\n\n                            that.trigger(CONTENTLOAD, { pane: pane[0] });\n                        },\n                        error: function(xhr, status) {\n                            that.trigger(ERROR, {\n                                pane: pane[0],\n                                status: status,\n                                xhr: xhr\n                            });\n                        }\n                    });\n                } else {\n                    pane.removeClass(KSCROLLABLE)\n                        .html(\"<iframe src='\" + url + \"' frameborder='0' class='k-content-frame'>\" +\n                            \"This page requires frames in order to show content\" +\n                            \"</iframe>\");\n                }\n            }\n        },\n\n        _triggerAction: function(type, pane) {\n            var paneConfig = pane.data(PANE);\n            var shouldExecute = (paneConfig.collapsed && type == EXPAND) || (!paneConfig.collapsed && type == COLLAPSE);\n\n            if (!paneConfig.collapsible) {\n                return;\n            }\n\n            if (shouldExecute && !this.trigger(type, { pane: pane[0] })) {\n                this[type](pane[0]);\n            }\n\n            this.resizing.stop();\n            this.resizing.end();\n        },\n\n        _togglePane: function(e) {\n            var that = this,\n                target = $(e.target),\n                arrow;\n\n            if (target.closest(\".k-splitter\")[0] != that.element[0]) {\n                return;\n            }\n\n            arrow = target.children(\"span:not(.k-resize-handle)\");\n\n            if (arrow.length !== 1) {\n                return;\n            }\n\n            if (arrow.is(\".k-collapse-prev\")) {\n                that._triggerAction(COLLAPSE, target.prev());\n            } else if (arrow.is(\".k-collapse-next\")) {\n                that._triggerAction(COLLAPSE, target.next());\n            } else if (arrow.is(\".k-expand-prev\")) {\n                that._triggerAction(EXPAND, target.prev());\n            } else if (arrow.is(\".k-expand-next\")) {\n                that._triggerAction(EXPAND, target.next());\n            }\n\n            that.resizing?.end();\n        },\n        _arrowClick: function(arrowType) {\n            var that = this;\n\n            return function(e) {\n                var target = $(e.currentTarget),\n                    pane;\n\n                if (target.closest(\".k-splitter\")[0] != that.element[0]) {\n                    return;\n                }\n\n                if (target.is(\".k-\" + arrowType + \"-prev\")) {\n                    pane = target.parent().prev();\n                } else {\n                    pane = target.parent().next();\n                }\n                that._triggerAction(arrowType, pane);\n            };\n        },\n        _updateSplitBar: function(splitbar, previousPane, nextPane, previousPaneEl) {\n            var catIconIf = function(actionType, iconType, condition) {\n                var icon = iconType ? ui.icon({ icon: iconType, size: \"xsmall\" }) : \"\";\n                return condition ? \"<span class='k-\" + actionType + \"'>\" + icon + \"</span>\" : \"\";\n            },\n                orientation = this.orientation,\n                draggable = (previousPane.resizable !== false) && (nextPane.resizable !== false),\n                prevCollapsible = previousPane.collapsible,\n                prevCollapsed = previousPane.collapsed,\n                nextCollapsible = nextPane.collapsible,\n                nextCollapsed = nextPane.collapsed,\n                previousPaneId = previousPaneEl.attr(\"id\");\n\n            if (!previousPaneId) {\n                previousPaneId = kendo.guid();\n                previousPaneEl.attr(\"id\", previousPaneId);\n            }\n\n            const isRtl = kendo.support.isRtl(splitbar);\n            const leftIcon = isRtl ? \"caret-alt-right\" : \"caret-alt-left\";\n            const rightIcon = isRtl ? \"caret-alt-left\" : \"caret-alt-right\";\n\n            splitbar.addClass(\"k-splitbar k-splitbar-\" + orientation)\n                .attr(\"role\", \"separator\")\n                .attr(ARIA_VALUEMIN, \"0\")\n                .attr(ARIA_VALUEMAX, \"100\")\n                .attr(ARIA_CONTROLS, previousPaneId)\n                .removeClass(\"k-splitbar-\" + orientation + \"-hover\")\n                .toggleClass(\"k-splitbar-draggable-\" + orientation,\n                    draggable && !prevCollapsed && !nextCollapsed)\n                .toggleClass(\"k-splitbar-static-\" + orientation,\n                    !draggable && !prevCollapsible && !nextCollapsible)\n                .html(\n                    catIconIf(\"collapse-prev\", \"caret-alt-up\", prevCollapsible && !prevCollapsed && !nextCollapsed && orientation == VERTICAL) +\n                    catIconIf(\"collapse-prev\", leftIcon, prevCollapsible && !prevCollapsed && !nextCollapsed && orientation == HORIZONTAL) +\n                    catIconIf(\"expand-prev\", \"caret-alt-down\", prevCollapsible && prevCollapsed && !nextCollapsed && orientation == VERTICAL) +\n                    catIconIf(\"expand-prev\", rightIcon, prevCollapsible && prevCollapsed && !nextCollapsed && orientation == HORIZONTAL) +\n                    catIconIf(\"resize-handle\", null, draggable && orientation == VERTICAL) +\n                    catIconIf(\"resize-handle\", null, draggable && orientation == HORIZONTAL) +\n                    catIconIf(\"collapse-next\", \"caret-alt-down\", nextCollapsible && !nextCollapsed && !prevCollapsed && orientation == VERTICAL) +\n                    catIconIf(\"collapse-next\", rightIcon, nextCollapsible && !nextCollapsed && !prevCollapsed && orientation == HORIZONTAL) +\n                    catIconIf(\"expand-next\", \"caret-alt-up\", nextCollapsible && nextCollapsed && !prevCollapsed && orientation == VERTICAL) +\n                    catIconIf(\"expand-next\", leftIcon, nextCollapsible && nextCollapsed && !prevCollapsed && orientation == HORIZONTAL)\n                );\n\n            if (previousPane.labelId) {\n                splitbar.attr(ARIA_LABELLEDBY, previousPane.labelId);\n            } else if (previousPane.label) {\n                splitbar.attr(ARIA_LABEL, previousPane.label);\n            }\n\n            if (orientation == HORIZONTAL) {\n                splitbar.attr(ARIA_ORIENTATION, VERTICAL);\n            }\n\n            if (!draggable && !prevCollapsible && !nextCollapsible) {\n                splitbar.removeAttr(TABINDEX);\n            }\n        },\n        _updateSplitBars: function() {\n            var that = this;\n\n            this.element.children(\".k-splitbar\").each(function() {\n                var splitbar = $(this),\n                    previousPaneEl = splitbar.prevAll(PANECLASS).first(),\n                    previousPane = previousPaneEl.data(PANE),\n                    nextPane = splitbar.nextAll(PANECLASS).first().data(PANE);\n\n                // TODO: check if the proper place to set order\n                splitbar.css(\"order\", previousPane.order + 1);\n\n                if (!nextPane) {\n                    return;\n                }\n\n                that._updateSplitBar(splitbar, previousPane, nextPane, previousPaneEl);\n            });\n        },\n        _removeSplitBars: function() {\n            this.element.children(\".k-splitbar\").remove();\n        },\n        _panes: function() {\n            if (!this.element) {\n                return $();\n            }\n            return this.element.children(PANECLASS);\n        },\n\n        _resetAriaValueNow: function(splitBars, panesSizes) {\n            var i, splitbar, valueNow, joinDimension;\n\n            for (i = 0; i < splitBars.length; i++) {\n                joinDimension = (panesSizes[i] + panesSizes[i + 1]) || 1;\n                valueNow = Math.round(panesSizes[i] / joinDimension * 100);\n                splitbar = splitBars[i];\n                splitbar.setAttribute(ARIA_VALUENOW, valueNow);\n            }\n        },\n\n        _resize: function() {\n            var that = this,\n                element = that.element,\n                panes = element.children(PANECLASS),\n                isHorizontal = that.orientation == HORIZONTAL,\n                splitBars = element.children(\".k-splitbar\"),\n                splitBarsCount = splitBars.length,\n                sizingProperty = isHorizontal ? \"width\" : \"height\",\n                totalSize = element[sizingProperty](),\n                panesSizes = [];\n\n            that.wrapper.addClass(\"k-splitter-resizing\");\n\n            if (that._suppressResize) {\n                return;\n            }\n\n            if (splitBarsCount === 0) {\n                splitBarsCount = panes.length - 1;\n                panes.slice(0, splitBarsCount)\n                    .after(\"<div tabindex='0' class='k-splitbar' data-marker='\" + that._marker + \"' />\");\n\n                that._updateSplitBars();\n                splitBars = element.children(\".k-splitbar\");\n            } else {\n                that._updateSplitBars();\n            }\n\n            // discard splitbar sizes from total size\n            splitBars.each(function() {\n                totalSize -= this[isHorizontal ? \"offsetWidth\" : \"offsetHeight\"];\n            });\n\n            var sizedPanesWidth = 0,\n                sizedPanesCount = 0,\n                freeSizedPanes = $();\n\n            panes\n                .each(function() {\n                    var element = $(this),\n                        config = element.data(PANE) || {}, size;\n\n                    element.removeClass(\"k-collapsed\");\n                    if (config.collapsed) {\n                        size = config.collapsedSize ? calculateSize(config.collapsedSize, totalSize) : 0;\n                        element.css(\"overflow\", \"hidden\").addClass(\"k-collapsed\");\n                    } else if (config.isFluid || isFluid(config.size)) {\n                        freeSizedPanes = freeSizedPanes.add(this);\n                        panesSizes.push(false);\n                        return;\n                    } else { // sized in px/%, not collapsed\n                        size = calculateSize(config.size, totalSize);\n                    }\n\n                    sizedPanesCount++;\n                    sizedPanesWidth += size;\n                    panesSizes.push(size);\n                    element.css(PANE_SIZING_PROP, size + PX);\n                    return size;\n                });\n\n            totalSize -= sizedPanesWidth;\n\n            var freeSizePanesCount = freeSizedPanes.length,\n                freeSizePaneWidth = Math.floor(totalSize / freeSizePanesCount);\n\n            freeSizedPanes\n                .slice(0, freeSizePanesCount - 1)\n                .css(PANE_SIZING_PROP, freeSizePaneWidth + PX)\n                .end()\n                .eq(freeSizePanesCount - 1)\n                .css(PANE_SIZING_PROP, (totalSize - (freeSizePanesCount - 1) * freeSizePaneWidth) + PX);\n\n            panesSizes.forEach(function(size, i) {\n                if (size === false) {\n                    panesSizes[i] = freeSizePaneWidth;\n                }\n            });\n\n            that._resetAriaValueNow(splitBars, panesSizes);\n\n            // arrange panes\n            var sizingDomProperty = isHorizontal ? \"offsetWidth\" : \"offsetHeight\";\n\n            if (freeSizePanesCount === 0) {\n                var lastNonCollapsedPane = panes.filter(function() {\n                    return !(($(this).data(PANE) || {}).collapsed);\n                }).last();\n\n                if (lastNonCollapsedPane.length) {\n                    lastNonCollapsedPane[sizingProperty](totalSize + lastNonCollapsedPane[0][sizingDomProperty]);\n                }\n            }\n\n            that._detachEvents();\n            that._attachEvents();\n\n            that.wrapper.removeClass(\"k-splitter-resizing\");\n\n            kendo.resize(panes);\n            that.trigger(LAYOUTCHANGE);\n        },\n        toggle: function(pane, expand) {\n            var that = this,\n                paneConfig;\n\n            pane = that.element.find(pane);\n            paneConfig = pane.data(PANE);\n\n            if (!expand && paneConfig?.collapsible !== true) {\n                return;\n            }\n\n            if (arguments.length == 1) {\n                expand = paneConfig.collapsed === undefined$1 ? false : paneConfig.collapsed;\n            }\n\n            paneConfig.collapsed = !expand;\n\n            pane.toggleClass(KHIDDEN, paneConfig.collapsed && !paneConfig.collapsedSize);\n            pane.css(\"overflow\", paneConfig.collapsed && !paneConfig.collapsedSize ? \"hidden\" : \"auto\");\n            that.resize(true);\n        },\n\n        collapse: function(pane) {\n            this.toggle(pane, false);\n        },\n\n        expand: function(pane) {\n            this.toggle(pane, true);\n        },\n\n        _addPane: function(config, idx, paneElement) {\n            var that = this;\n\n            if (paneElement.length) {\n                that.options.panes.splice(idx, 0, config);\n                // TODO: recalculate order of panes and update them\n                that._initPane(paneElement, config);\n\n                that._removeSplitBars();\n\n                that.resize(true);\n            }\n\n            return paneElement;\n        },\n\n        append: function(config) {\n            config = config || {};\n\n            var that = this,\n                paneElement = $(\"<div />\").appendTo(that.element);\n\n            return that._addPane(config, that.options.panes.length, paneElement);\n        },\n\n        insertBefore: function(config, referencePane) {\n            referencePane = $(referencePane);\n            config = config || {};\n\n            var that = this,\n                idx = that.wrapper.children(\".k-pane\").index(referencePane),\n                paneElement = $(\"<div />\").insertBefore($(referencePane));\n\n            return that._addPane(config, idx, paneElement);\n        },\n\n        insertAfter: function(config, referencePane) {\n            referencePane = $(referencePane);\n            config = config || {};\n\n            var that = this,\n                idx = that.wrapper.children(\".k-pane\").index(referencePane),\n                paneElement = $(\"<div />\").insertAfter($(referencePane));\n\n            return that._addPane(config, idx + 1, paneElement);\n        },\n\n        remove: function(pane) {\n            var that = this;\n            pane = that.wrapper.find(pane);\n\n            if (pane.length) {\n                kendo.destroy(pane);\n                pane.each(function(idx, element) {\n                    that.options.panes.splice(that.wrapper.children(\".k-pane\").index(element), 1);\n                    $(element).remove();\n                });\n\n                that._removeSplitBars();\n\n                if (that.options.panes.length) {\n                    that.resize(true);\n                }\n            }\n\n            return that;\n        },\n\n        size: panePropertyAccessor(\"size\", true),\n\n        min: panePropertyAccessor(\"min\"),\n\n        max: panePropertyAccessor(\"max\"),\n\n        _getPaneElement: function(paneIndex) {\n            const that = this;\n            const panes = that._getPaneElements();\n            return panes[paneIndex];\n        },\n\n        _getPaneElements: function() {\n            const that = this;\n            const panes = Array.from(that.element.children() || []).filter(x => $(x).hasClass(\"k-pane\") || $(x).hasClass(\"k-splitter\"));\n            return panes;\n        },\n        _dragSplitterBar: function(splitterBarIndex, delta) {\n            const that = this;\n            const { leftPane, rightPane } = that._getAdjacentPanes(splitterBarIndex);\n\n            const leftPaneNewSize = leftPane.computedSize + delta;\n            const isLeftPaneSizeInBounds = leftPaneNewSize > leftPane.min && leftPaneNewSize < leftPane.max;\n\n            const panesWithoutSize = that._getPaneElements().filter(x => !x.style[PANE_SIZING_PROP]);\n            const canResizeBothPanes = (leftPane.size || rightPane.size) && panesWithoutSize.length > 1;\n\n            if ((leftPane.size && rightPane.size) || canResizeBothPanes) {\n                if (isLeftPaneSizeInBounds) {\n                    that._resizePane(leftPane, delta);\n                    that._resizePane(rightPane, -delta);\n                }\n            } else if (rightPane.size) {\n                that._resizePane(rightPane, -delta);\n            } else {\n                that._resizePane(leftPane, delta);\n            }\n            return { leftPane, rightPane };\n        },\n        _getAdjacentPanes: function(splitterBarIndex) {\n            const that = this;\n            const leftPaneIndex = splitterBarIndex;\n            const rightPaneIndex = splitterBarIndex + 1;\n\n            const leftPaneELement = that._getPaneElement(leftPaneIndex);\n            const rightPaneELement = that._getPaneElement(rightPaneIndex);\n\n            const leftPane = that._getPane(leftPaneIndex);\n            const rightPane = that._getPane(rightPaneIndex);\n\n            const leftPaneSize = that._getPaneOffsetSize(leftPaneIndex);\n            const rightPaneSize = that._getPaneOffsetSize(rightPaneIndex);\n\n            const totalPaneSize = leftPaneSize + rightPaneSize;\n            const splitterSize = that._getElementClientSize(that.element, that.options.orientation);\n            const getPixelSize = paneSize => that._calculatePixelSize(paneSize, splitterSize);\n\n            const { leftPaneMaxSize, rightPaneMaxSize } = that._getAdjacentPanesMaxSize(leftPaneIndex, rightPaneIndex);\n            const rightMaxPixelSize = getPixelSize(rightPane && rightPane.max);\n            const leftMaxPixelSize = getPixelSize(leftPane && leftPane.max);\n\n            return {\n                leftPane: {\n                    index: leftPaneIndex,\n                    computedSize: leftPaneSize,\n                    min: getPixelSize(leftPane && leftPane.min) || (rightMaxPixelSize ? totalPaneSize - rightMaxPixelSize : 0) || 0,\n                    max: leftPaneMaxSize,\n                    size: leftPaneELement.style[PANE_SIZING_PROP],\n                    collapsible: leftPane && leftPane.collapsible,\n                    uid: leftPane.uid\n                },\n                rightPane: {\n                    index: rightPaneIndex,\n                    computedSize: rightPaneSize,\n                    min: getPixelSize(rightPane && rightPane.min) || (leftMaxPixelSize ? totalPaneSize - leftMaxPixelSize : 0) || 0,\n                    max: rightPaneMaxSize,\n                    size: rightPaneELement.style[PANE_SIZING_PROP],\n                    collapsible: rightPane && rightPane.collapsible,\n                    uid: rightPane.uid\n                }\n            };\n        },\n\n        _resizePane: function(pane, delta) {\n            const that = this;\n            const constrainedSize = clamp(pane.computedSize + delta, pane.min, pane.max);\n            let newSize = \"\";\n\n            if (isPercentageSize(pane.size)) {\n                const splitterSize = that._getElementClientSize(that.element, that.options.orientation);\n                newSize = toPercentages(100 * constrainedSize / splitterSize);\n            } else {\n                newSize = toPixel(constrainedSize);\n            }\n            pane.size = newSize;\n            that._setPaneSize(pane.index, newSize);\n        },\n\n        _allExpandedPanesHaveSize: function() {\n            const that = this;\n            const expandedPanes = that.options.panes.filter(x => !x.collapsed);\n\n            if (expandedPanes.length) {\n                return expandedPanes.filter(x => x.size).length;\n            }\n\n            return false;\n        },\n\n        _setPaneSize: function(paneIndex, size) {\n            const that = this;\n            const paneElement = that._getPaneElement(paneIndex);\n\n            if (!paneElement) {\n                return;\n            }\n\n            if (!that._allExpandedPanesHaveSize()) {\n                $(paneElement).addClass(KSTATIC_PANE);\n            }\n\n            paneElement.style[PANE_SIZING_PROP] = size;\n            $(paneElement).data(\"pane\").size = size;\n        },\n\n        _getPaneSizes: function(paneIndex) {\n            const that = this;\n            const splitterSize = that._getElementClientSize(that.element, that.options.orientation);\n            const pane = that._getPane(paneIndex);\n            const paneSize = that._getPaneOffsetSize(paneIndex);\n            const paneMinSize = pane && pane.min ? that._calculatePixelSize(pane.min, splitterSize) : 0;\n            const paneMaxSize = pane && pane.max ? that._calculatePixelSize(pane.max, splitterSize) : MAX_NUMBER_VALUE;\n\n            return {\n                size: paneSize,\n                min: paneMinSize,\n                max: paneMaxSize\n            };\n        },\n\n        _calculatePixelSize: function(size, containerSize) {\n            let numericSize = kendo.parseFloat(size);\n\n            if (isPercentageSize(size)) {\n                numericSize = (containerSize * numericSize / 100);\n            }\n\n            return numericSize;\n        },\n\n        _getPaneOffsetSize: function(paneIndex) {\n            const that = this;\n            const paneElement = that._getPaneElement(paneIndex);\n            const size = that._getElementOffsetSize(paneElement, that.options.orientation);\n            return size;\n        },\n\n\n        _getElementOffsetSize: function(element, orientation) {\n            if (!element) {\n                return 0;\n            }\n\n            const rect = element.getBoundingClientRect();\n\n            if (orientation === HORIZONTAL) {\n                return rect.width;\n            } else {\n                return rect.height;\n            }\n        },\n\n        _getElementClientSize: function(element, orientation) {\n            const that = this;\n\n            return that._getElementSize(element, orientation, \"client\");\n        },\n\n        _getElementSize: function(element, orientation, sizeType) {\n            if (!element) {\n                return 0;\n            }\n\n            element = element[0];\n\n            if (orientation === HORIZONTAL) {\n                return element[`${sizeType}Width`];\n            } else {\n                return element[`${sizeType}Height`];\n            }\n        },\n\n        _getPane: function(paneIndex) {\n            const that = this;\n\n            return (that.options.panes || [])[paneIndex];\n        },\n\n        _getPaneIndex: function(pane) {\n            const that = this;\n\n            return that.options.panes.indexOf(pane);\n        },\n\n        _getAdjacentPanesMaxSize: function(leftPaneIndex, rightPaneIndex) {\n            const that = this;\n            const {\n                size: leftPaneSize,\n                min: leftPaneMinSize,\n                max: leftPaneMaxPixelSize\n            } = that._getPaneSizes(leftPaneIndex);\n\n            const {\n                size: rightPaneSize,\n                min: rightPaneMinSize,\n                max: rightPaneMaxPixelSize\n            } = that._getPaneSizes(rightPaneIndex);\n\n            const totalPaneSize = leftPaneSize + rightPaneSize;\n\n            const leftPaneMaxSize = Math.min(leftPaneMaxPixelSize, totalPaneSize - rightPaneMinSize);\n            const rightPaneMaxSize = Math.min(rightPaneMaxPixelSize, totalPaneSize - leftPaneMinSize);\n\n            return {\n                leftPaneMaxSize,\n                rightPaneMaxSize\n            };\n        },\n        _getElementIndex: function(element, childrenSelector) {\n            if (!element) {\n                return [].indexOf(element);\n            }\n\n            let children = Array.from(element.parent().children());\n\n            if (childrenSelector) {\n                children = children.filter(x => x.matches(childrenSelector));\n            }\n\n            return Array.from(children).indexOf(element[0]);\n        },\n    });\n\n    ui.plugin(Splitter);\n\n    function toPercentages(value) {\n        return `${value}%`;\n    }\n\n    function toPixel(value) {\n        return kendo.parseFloat(value) + \"px\";\n    }\n\n    function percentage(partialValue, totalValue) {\n        return (100 * partialValue) / totalValue;\n    }\n\n    function clamp(value, min, max) {\n        return Math.min(max, Math.max(min, value));\n    }\n\n    var verticalDefaults = {\n        sizingProperty: \"height\",\n        sizingDomProperty: \"offsetHeight\",\n        alternateSizingProperty: \"width\",\n        positioningProperty: \"top\",\n        mousePositioningProperty: \"pageY\"\n    };\n\n    var horizontalDefaults = {\n        sizingProperty: \"width\",\n        sizingDomProperty: \"offsetWidth\",\n        alternateSizingProperty: \"height\",\n        positioningProperty: \"left\",\n        mousePositioningProperty: \"pageX\"\n    };\n\n    function PaneResizing(splitter) {\n        var that = this,\n            orientation = splitter.orientation,\n            handle = \".k-splitbar-draggable-\" + orientation + \"[data-marker=\" + splitter._marker + \"]\";\n\n        if (splitter.options.clickMoveClick) {\n            handle += \",.k-ghost-splitbar\";\n        }\n\n        that.owner = splitter;\n        that._element = splitter.element;\n        that.orientation = orientation;\n\n        extend(that, orientation === HORIZONTAL ? horizontalDefaults : verticalDefaults);\n\n        that._resizable = new kendo.ui.Resizable(splitter.element, {\n            orientation: orientation,\n            handle: handle,\n            clickMoveClick: splitter.options.clickMoveClick,\n            hint: that._createHint.bind(that),\n            start: that._start.bind(that),\n            max: that._max.bind(that),\n            min: that._min.bind(that),\n            invalidClass: \"k-restricted-size-\" + orientation,\n            resize: that._resize.bind(that),\n            resizeend: that._stop.bind(that)\n        });\n    }\n\n    PaneResizing.prototype = {\n        stop: function() {\n            this._resizable._stop();\n        },\n\n        press: function(target) {\n            this._resizable.press(target);\n            this.pressed = true;\n        },\n\n        move: function(delta, target) {\n            if (!target.hasClass(\"k-splitbar-draggable-horizontal\") && !target.hasClass(\"k-splitbar-draggable-vertical\")) {\n                return;\n            }\n\n            const splitterBarIndex = this.owner._getElementIndex(target, `.${KSPLITBAR}`);\n            const { leftPane, rightPane } = this.owner._dragSplitterBar(splitterBarIndex, delta);\n            this.owner.trigger(RESIZE, { leftPane: leftPane, rightPane: rightPane });\n        },\n\n        end: function() {\n            this._resizable.end();\n            this.pressed = false;\n        },\n\n        destroy: function() {\n            this._resizable.destroy();\n            this._resizable = this._element = this.owner = null;\n        },\n\n        isResizing: function() {\n            return this._resizable.resizing;\n        },\n\n        _createHint: function(handle) {\n            var that = this;\n            return $(\"<div class='k-ghost-splitbar k-ghost-splitbar-\" + that.orientation + \"' />\")\n                .css(\"z-index\", 99)\n                .css(that.alternateSizingProperty, handle[that.alternateSizingProperty]());\n        },\n\n        _start: function(e) {\n            var that = this,\n                splitbar = $(e.currentTarget);\n\n            const isRtl = kendo.support.isRtl(that._element);\n            let offsetBoundaryProp = that.orientation === HORIZONTAL ? \"offsetLeft\" : \"offsetTop\";\n            const splitterBarIndex = that.owner._getElementIndex(splitbar, `.${KSPLITBAR}`);\n\n            const leftPaneELement = that.owner._getPaneElement(splitterBarIndex);\n            const rightPaneELement = that.owner._getPaneElement(splitterBarIndex + 1);\n            let previousPane = $((that.orientation === HORIZONTAL && isRtl) ? rightPaneELement : leftPaneELement);\n            let nextPane = $((that.orientation === HORIZONTAL && isRtl) ? leftPaneELement : rightPaneELement);\n\n            if ($(e.initialTarget).closest(\".k-expand-next, .k-expand-prev, .k-collapse-next, .k-collapse-prev\").length > 0 ||\n                !nextPane.length ||\n                !previousPane.length) {\n                e.preventDefault();\n                return;\n            }\n\n            var previousPaneConfig = previousPane.data(PANE),\n                nextPaneConfig = nextPane.data(PANE),\n                prevBoundary = parseInt(previousPane[0][offsetBoundaryProp], 10),\n                nextBoundary = parseInt(nextPane[0][offsetBoundaryProp], 10) + nextPane[0][that.sizingDomProperty] - splitbar[0][that.sizingDomProperty],\n                totalSize = parseInt(that._element.css(that.sizingProperty), 10),\n                toPx = function(value) {\n                    var val = parseInt(value, 10);\n                    return (isPixelSize(value) ? val : (totalSize * val) / 100) || 0;\n                };\n\n            if (!previousPaneConfig || !nextPaneConfig) {\n                e.preventDefault();\n                e.sender.draggable.clickMoveClick.cancel();\n                that.owner.element.find(\".k-ghost-splitbar\").remove();\n                return;\n            }\n\n            var prevMinSize = toPx(previousPaneConfig.min),\n                prevMaxSize = toPx(previousPaneConfig.max) || nextBoundary - prevBoundary,\n                nextMinSize = toPx(nextPaneConfig.min),\n                nextMaxSize = toPx(nextPaneConfig.max) || nextBoundary - prevBoundary;\n\n            that.previousPane = previousPane;\n            that.nextPane = nextPane;\n            that._maxPosition = Math.min(nextBoundary - nextMinSize, prevBoundary + prevMaxSize);\n            that._minPosition = Math.max(prevBoundary + prevMinSize, nextBoundary - nextMaxSize);\n        },\n        _max: function() {\n            return this._maxPosition;\n        },\n        _min: function() {\n            return this._minPosition;\n        },\n        _resize: function(e) {\n            let that = this;\n            let splitter = that.owner;\n            let orientation = splitter.orientation;\n            let delta;\n            const splitterBar = e.currentTarget || e.target;\n\n            if (!splitterBar) {\n                return;\n            }\n\n            const splitterBarIndex = splitter._getElementIndex(splitterBar, `.${KSPLITBAR}`);\n            const rtlModifier = kendo.support.isRtl(that._element) ? -1 : 1;\n            if (orientation === HORIZONTAL) {\n                delta = e.x.delta * rtlModifier;\n            } else {\n                delta = e.y.delta;\n            }\n\n            splitter._dragSplitterBar(splitterBarIndex, delta);\n        },\n        _stop: function(e) {\n            var that = this,\n                splitbar = $(e.currentTarget),\n                owner = that.owner;\n            let isRtl = kendo.support.isRtl(that._element);\n            owner._panes().children(\".k-splitter-overlay\").remove();\n\n            if (e.keyCode !== kendo.keys.ESC) {\n                let delta = owner.orientation === HORIZONTAL ? e.x.initialDelta : e.y.initialDelta;\n                let splitbarPosition = owner.orientation === HORIZONTAL ? splitbar.position().left : splitbar.position().top;\n                let ghostPosition = e.position;\n                let rtlModifier = (owner.orientation === HORIZONTAL && isRtl) ? -1 : 1;\n\n                const splitterBarIndex = this.owner._getElementIndex(e.currentTarget, `.${KSPLITBAR}`);\n                if (Math.abs(splitbarPosition - ghostPosition) > 2) {\n                    owner._dragSplitterBar(splitterBarIndex, delta * rtlModifier);\n                }\n\n                const { leftPane, rightPane } = owner._getAdjacentPanes(splitterBarIndex);\n                owner.trigger(RESIZE, { leftPane: leftPane, rightPane: rightPane });\n            }\n\n            return false;\n        }\n    };\n\n})(window.kendo.jQuery);\nvar kendo$1 = kendo;\n\nexport { __meta__, kendo$1 as default };\n"]}