{"version":3,"file":"kendo.aiprompt.js","names":["__meta__","id","name","category","description","depends","$","kendo","window","Widget","ui","extend","FOCUS","cssClasses","defaultViews","prompt","type","buttonIcon","output","commands","custom","AIPrompt","init","element","options","that","this","fn","call","views","length","promptCommands","push","promptOutputs","_initLayout","_initViews","_initToolbar","activeView","notify","enabled","toolbarItems","popup","messages","promptView","outputView","commandsView","customView","promptPlaceholder","promptSuggestions","generateOutput","outputTitle","outputRetryTitle","copyOutput","retryGeneration","ratePositive","rateNegative","showOutputRating","events","_initializeView","view","viewConfig","getter","Error","promptSuggestionItemTemplate","_unbindView","destroy","viewsArray","i","l","isSettings","defaultView","buttonText","Object","assign","title","index","getViews","undefined","_activeViewIndex","Number","isInteger","_selectedView","findIndex","v","render","_updateToolbarState","toolItem","toolbar","_getAllItems","_resetTabIndex","trigger","addPromptOutput","guid","unshift","renderPromptOutput","activeToolIndex","find","each","elm","toggle","header","addClass","append","popupWrapper","closest","_getViewTools","map","text","icon","fillMode","themeColor","rounded","togglable","attributes","items","Array","isArray","closeButton","item","toolbarEl","kendoToolBar","resizable","concat","appendTo","data","focus","off","plugin","jQuery","kendo$1"],"sources":["kendo.aiprompt.js"],"mappings":"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","ignoreList":[],"sourcesContent":["import './kendo.core.js';\nimport './kendo.icons.js';\nimport './kendo.textarea.js';\nimport './kendo.button.js';\nimport './kendo.toolbar.js';\nimport './kendo.aiprompt.views.js';\n\nconst __meta__ = {\n    id: \"aiprompt\",\n    name: \"AIPrompt\",\n    category: \"web\",\n    description: \"The AIPrompt component simplifies the incorporation of external AI services into apps.\",\n    depends: [\"core\", \"icons\", \"textarea\", \"button\", \"toolbar\", \"panelbar\"],\n};\n\n(function($) {\n    let kendo = window.kendo,\n        Widget = kendo.ui.Widget,\n        NS = \".kendoAIPrompt\",\n        ui = kendo.ui,\n        extend = $.extend,\n\n        COMMAND_EXECUTE = \"commandExecute\",\n        PROMPT_REQUEST = \"promptRequest\",\n        OUTPUT_RATING_CHANGE = \"outputRatingChange\",\n        OUTPUT_COPY = \"outputCopy\",\n\n        FOCUS = \"focus\";\n\n    let cssClasses = {\n        menuButton: \"k-menu-button\",\n        aIPrompt: \"k-prompt\"\n    };\n\n    let defaultViews = {\n        prompt: {\n            type: \"kendo.ui.AIPromptPromptView\",\n            name: \"prompt\",\n            buttonIcon: \"sparkles\",\n        },\n        output: {\n            type: \"kendo.ui.AIPromptOutputView\",\n            name: \"output\",\n            buttonIcon: \"comment\",\n        },\n        commands: {\n            type: \"kendo.ui.AIPromptCommandsView\",\n            name: \"commands\",\n            buttonIcon: \"more-horizontal\",\n        },\n        custom: {\n            type: \"kendo.ui.AIPromptCustomView\",\n            name: \"custom\",\n        }\n    };\n\n    let AIPrompt = Widget.extend({\n        init: function(element, options) {\n            let that = this;\n            options = options || {};\n\n            Widget.fn.init.call(that, element, options);\n\n            if (that.options.views.length == 0) {\n                that.options.views = [\"prompt\", \"output\"];\n\n                if (this.options.promptCommands && this.options.promptCommands.length) {\n                    this.options.views.push(\"commands\");\n                }\n            }\n\n            that.promptOutputs = that.options.promptOutputs || [];\n            that._initLayout();\n            that._initViews();\n            that._initToolbar();\n            that.activeView(that.options.activeView);\n\n            kendo.notify(that);\n        },\n\n        options: {\n            name: \"AIPrompt\",\n            enabled: true,\n            toolbarItems: [],\n            promptOutputs: [],\n            activeView: 0,\n            views: [],\n            popup: null,\n            messages: {\n                promptView: \"Ask AI\",\n                outputView: \"Output\",\n                commandsView: \"\",\n                customView: \"Custom View\",\n                promptPlaceholder: \"Ask or generate content with AI\",\n                promptSuggestions: \"Prompt Suggestions\",\n                generateOutput: \"Generate\",\n                outputTitle: \"Generated with AI\",\n                outputRetryTitle: \"Generated with AI\",\n                copyOutput: \"Copy\",\n                retryGeneration: \"Retry\",\n                ratePositive: \"\",\n                rateNegative: \"\"\n            },\n            showOutputRating: true,\n        },\n\n        events: [\n            COMMAND_EXECUTE,\n            PROMPT_REQUEST,\n            OUTPUT_RATING_CHANGE,\n            OUTPUT_COPY,\n        ],\n\n        _initializeView: function(name) {\n            let viewConfig = this.views[name];\n            let view;\n            if (viewConfig) {\n                let type = viewConfig.type;\n\n                if (typeof type === \"string\") {\n                    type = kendo.getter(viewConfig.type)(window);\n                }\n\n                if (type) {\n                    view = new type(this.element, extend(true, {\n                        promptSuggestions: this.options.promptSuggestions,\n                        promptCommands: this.options.promptCommands,\n                        promptOutputs: this.promptOutputs,\n                        showOutputRating: this.options.showOutputRating,\n                        messages: this.options.messages,\n                        promptSuggestionItemTemplate: this.options.promptSuggestionItemTemplate,\n\n                    },\n                        viewConfig\n                    ));\n                } else {\n                    throw new Error(\"There is no such view\");\n                }\n            }\n\n            return view;\n        },\n\n        _unbindView: function(view) {\n            if (view) {\n                view.destroy();\n            }\n        },\n\n        _initViews: function() {\n            let that = this,\n                options = that.options,\n                views = options.views;\n\n            that.views = {};\n            that.viewsArray = [];\n\n            for (let i = 0, l = views.length; i < l; i++) {\n                let view = views[i];\n                let isSettings = typeof view === \"object\";\n                let name = view;\n\n                if (isSettings) {\n                    name = typeof view.type !== \"string\" ? view.name : view.type;\n                }\n\n                let defaultView = defaultViews[name];\n\n                if (defaultView) {\n                    if (isSettings) {\n                        view.type = defaultView.type;\n                    }\n\n                    defaultView.buttonText = that.options.messages[`${name}View`];\n                }\n\n                view = Object.assign({ title: view.title, name, index: i }, defaultView, isSettings ? view : {});\n                that.viewsArray.push(view);\n\n                if (name) {\n                    that.views[name] = view;\n                }\n            }\n        },\n\n        getViews: function() {\n            return this.viewsArray;\n        },\n\n        activeView: function(name) {\n            let that = this;\n            if (name === undefined) {\n                return that._activeViewIndex;\n            }\n\n            if (Number.isInteger(name)) {\n                name = that.viewsArray[name].name;\n            }\n\n            if (name && that.views[name]) {\n                if (that._selectedView) {\n                    that._unbindView(that._selectedView);\n                }\n\n                that._selectedView = that._initializeView(name);\n                that._activeViewIndex = that.viewsArray.findIndex(v => v.name === name);\n                that._selectedView.render();\n\n                that._updateToolbarState(that._activeViewIndex);\n\n                let toolItem = $(that.toolbar._getAllItems()[that._activeViewIndex]);\n                that.toolbar._resetTabIndex(toolItem);\n                toolItem.trigger(FOCUS);\n            }\n        },\n\n        addPromptOutput: function(output) {\n            output.id = output.id || kendo.guid();\n            this.promptOutputs.unshift(output);\n\n            if (typeof this._selectedView.renderPromptOutput === \"function\") {\n                return this._selectedView.renderPromptOutput(output);\n            }\n        },\n\n        _updateToolbarState: function(activeToolIndex) {\n            let toolbar = this.toolbar;\n            toolbar.element.find(\".k-toolbar-toggle-button\").each(function(index, elm) {\n                toolbar.toggle($(elm), index == activeToolIndex);\n            });\n        },\n\n        _initLayout: function() {\n            let that = this,\n                header = $(\"<div></div>\").addClass(\"k-prompt-header\");\n            that.header = header;\n            that.element.addClass(cssClasses.aIPrompt);\n            that.element.append(header);\n            const popupWrapper = that.element.closest('.k-popup');\n\n            if (popupWrapper.length) {\n                $(popupWrapper).addClass('k-prompt-popup');\n            }\n        },\n\n        _getViewTools: function() {\n            let that = this;\n\n            return that.viewsArray.map(v => {\n                if (v.name === 'commands') {\n                    if (v.buttonText) {\n                        v.title = v.buttonText;\n                    } else {\n                        v.title = \"More Actions\";\n                    }\n                }\n\n                return {\n                type: \"button\",\n                text: v.buttonText,\n                icon: v.buttonIcon,\n                fillMode: \"flat\",\n                themeColor: \"primary\",\n                rounded: \"full\",\n                togglable: true,\n                attributes: { title: v.title },\n                toggle: function() {\n                    that.activeView(v.name);\n                }\n            };\n        });\n        },\n\n        _initToolbar: function() {\n            let that = this;\n            let items = that.options.toolbarItems;\n            items = Array.isArray(items) ? items : [items];\n            const closeButton = items.find(item => item.icon === 'x');\n\n            if (closeButton) {\n                closeButton.themeColor = 'base';\n            }\n\n            let toolbarEl = $(\"<div></div>\").kendoToolBar({\n                resizable: false,\n                fillMode: \"flat\",\n                items: that._getViewTools().concat(items)\n            }).appendTo(that.header);\n\n            that.toolbar = toolbarEl.data(\"kendoToolBar\");\n        },\n\n        focus: function() {\n            let that = this;\n            that.element.trigger(FOCUS);\n        },\n\n        destroy: function() {\n            let that = this;\n\n            that.toolbar?.destroy();\n            that._selectedView?.destroy();\n\n            that.element.off(NS);\n\n            Widget.fn.destroy.call(that);\n        }\n    });\n\n    ui.plugin(AIPrompt);\n\n})(window.kendo.jQuery);\nvar kendo$1 = kendo;\n\nexport { __meta__, kendo$1 as default };\n"]}