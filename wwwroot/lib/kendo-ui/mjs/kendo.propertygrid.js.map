{"version":3,"file":"kendo.propertygrid.js","names":["ExcelExporter","$","kendo","window","TreeListContextMenu","ui","treelist","ContextMenu","extend","PropertyGridContextMenu","init","element","options","fn","call","this","defaultItems","separator","name","copy","text","icon","command","softRules","copyName","copyDeclaration","resize","rules","reset","expandItem","collapseItem","propertygrid","jQuery","Class","keys","Command","propertyGrid","CopyCommand","exec","that","target","closest","dataItem","selectedText","getSelection","getRangeAt","toString","navigator","clipboard","writeText","field","value","_objectFromNodes","tabDelimitedValue","JSON","stringify","description","filter","item","join","ResetCommand","dataSource","cancelChanges","trigger","type","model","container","_render","ResizeColumnCommand","_actionButtonsTemplate","apply","cancel","insertButtonIcon","cancelButtonIcon","html","renderButton","themeColor","dialog","form","tableColumnIndex","index","columnIndex","grouped","columnSelector","oldColumnWidth","table","find","outerWidth","dialogOptions","title","visible","resizable","minWidth","totalWidth","width","e","delta","wrapper","data","formData","columnsize","newColumnWidth","columns","children","eq","column","oldWidth","newWidth","close","preventDefault","destroy","component","colCount","length","widths","idx","push","each","col","adjustColWidths","appendTo","document","body","kendoWindow","_createForm","after","on","end","keyCode","ENTER","ESC","center","open","currentColumnWidth","kendoForm","validation","validateOnBlur","validaitonSummary","renderButtons","items","label","editor","editorOptions","min","ToggleItemCommand","expand","collapse","ToggleGroupLayout","removeClass","_refreshLayout","_updateDetails","ToggleDetails","visibleDetails","toggleClass","ExcelExport","saveAsExcel","PDFExport","saveAsPDF","PropertyGridCommand","commands","__meta__","id","category","depends","NS","kendoDom","dom","kendoDomElement","kendoHtmlElement","kendoTextElement","F10","Editable","TreeList","isArray","Array","isPlainObject","CHANGE","EXPAND","COLLAPSE","GROUP_EXPAND","GROUP_COLLAPSE","CARET_ALT_DOWN","GROUPING_ROW","TR","TD","defaultBodyContextMenu","defaultCommands","group","togglable","showText","commandName","attributes","overflow","details","sort","componentOptions","commandOn","dataTextField","dataValueField","class","search","prefixOptions","placeholder","spacer","excel","pdf","isNullorUndefined","isEditable","PropertyGridDataSource","TreeListDataSource","groupedItemsTree","currentChildren","_childrenMap","view","_defaultParentId","Query","toArray","filterGroupedItemsTree","expression","filterExpression","filters","logic","groups","filterItems","filtered","i","hasChildren","childNodes","filteredGroups","forEach","itm","DynamicInCellEditor","createEditable","fields","editable","clearContainer","change","off","empty","removeAttr","attr","PropertyGrid","_processOptions","_processedModel","_processModel","_createDataSource","_wrapper","_detailsBox","_groupable","notify","hasHeader","groupable","contextMenu","sortable","selectable","scrollable","showDetails","size","defaultTools","messages","defaultGroupName","events","defaultEditors","string","date","number","boolean","_groupContentTemplate","groupName","action","_detailsTemplate","_setEditable","editMode","toolbar","_extendColumnOptions","fieldColumn","valueColumn","_processSettings","obj","settings","flatData","_flatten","_setDefaults","Object","entries","map","x","serverGrouping","schema","parentId","expanded","appendNested","result","key","nestedKeys","nestedObject","collectionIdx","nestedKey","flattenObject","propType","collection","nested","flattenCollection","isDate","isComplexObject","tempId","parsed","parseDate","_setDefaultEditor","_createIncellEditor","cell","toJSON","parentColumn","fieldRenderer","_cellContent","bind","_createDirtyTemplate","templateSettings","_customTemplateSettings","template","columnTemplate","incellEditing","_isIncellEditable","isValueColumn","dirtyIndicator","dirty","get","dirtyIndicatorTemplate","format","_editableCellContent","bTag","content","_generateGroupRow","groupRowContent","tdElement","className","colSpan","role","uid","_generateDetailsBox","_renderRows","selected","childrenMap","viewChildrenMap","hasFooterTemplate","selectedRow","_selectedRowUid","rows","prepend","_groupedData","groupTr","concat","_trs","editedColumn","editedColumnIndex","aggregates","level","remove","_contentTree","render","_generateRowOptions","pageable","_renderedModelLevel","isAlt","_absoluteIndex","_renderRow","rowOptions","renderer","row","_tds","groupTdElement","splice","editCell","cellIndex","draggable","isColumnEditable","_editCell","css","addClass","_toolbar","toolbarOptions","_processToolbarItems","_verifyItems","kendoToolBar","navigateOnTab","navigatable","_attachToolbarHandlers","append","toolbarWidget","getKendoToolBar","sortElement","_toolbarClick","getKendoDropDownList","_sortItems","some","hasOwnProperty","findIndex","_getCommandType","toLowerCase","Error","imageClass","spriteCssClass","iconClass","menuButtons","buttons","click","origEvent","event","originalEvent","stopPropagation","_commandClick","currentTarget","ev","val","_action","dir","sender","refresh","_initContextMenu","tbodyContextMenu","mainOptions","tbody","states","_buildStates","isResizable","windowHasSelection","rangeCount","isDirty","isNotInEditMode","hasClass","isNotGroupColumn","isExpandable","isCollapsible","args","commandOptions","rootNodes","hashTable","create","node","childNode","guid","_groupableClickHandler","groupRow","is","_groupRowKeyDown","current","handled","focusElement","_setCurrent","_findCurrentCell","LEFT","RIGHT","altKey","_handleGroupRowExpandCollapse","parent","_toggleGroup","_getGroupedData","_search","input","clearTimeout","_searchTimeOut","setTimeout","searchFields","operator","select","_","detailsTemplate","detailsContainer","_clearDetails","setDataSource","selectItem","toggleItem","toggleGroup","toggleDetails","edit","saveState","saveChanges","resetState","setOptions","currentOptions","getOptions","_events","deepExtend","before","_setEvents","hierarchyRows","this$1$1","depth","_depth","parents","_hasFooterTemplate","collapsible","widget","_buildGroupedDataRows","_buildDataRows","_prependHeaderRows","PropertyGridExcelExporter","_instance","_hierarchyRows","_trimColumns","allColumns","_leafColumns","_prepareColumn","_visibleColumns","hasGroups","hierarchy","hasGroupHeaderColumn","groupHeaderColumnTemplate","_recursiveRows","_dataRow","itmIdx","groupItem","cells","background","color","previousItemId","itemLevel","itemId","hasFooter","previousLevel","_hierarchyFooterRows","rootAggregate","_hierarchyFooter","getAllMethods","func","createProxyMember","workbook","Deferred","d","fetch","then","_hierarchy","resolve","promise","PropertyGridExcelMixin","proto","proxyURL","filterable","fileName","exporter","allPages","book","ooxml","Workbook","skipCustomHeight","toDataURLAsync","dataURI","saveAs","forceProxy","_restoreExpandedState","prototype","cssProperties","propertyDictionary","registerPrefix","plugin","kendo$1"],"sources":["kendo.propertygrid.js"],"mappings":"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","ignoreList":[],"sourcesContent":["import './kendo.menu.js';\nimport './kendo.excel.js';\nimport './kendo.progressbar.js';\nimport './kendo.treelist.js';\nimport './kendo.dialog.js';\nimport './kendo.ooxml.js';\nimport { E as ExcelExporter } from './kendo.ooxml.cmn.chunk.js';\n\n(function($, undefined$1) {\n    const kendo = window.kendo,\n        ui = kendo.ui,\n        TreeListContextMenu = ui.treelist.ContextMenu,\n        extend = $.extend;\n\n    let PropertyGridContextMenu = TreeListContextMenu.extend({\n        init: function(element, options) {\n            const that = this;\n\n            TreeListContextMenu.fn.init.call(that, element, options);\n        },\n        defaultItems: {\n            \"separator\": { name: \"separator\", separator: true },\n            \"copy\": { name: \"copy\", text: \"Copy\", icon: \"copy\", command: \"CopyCommand\", softRules: \"windowHasSelection\",options: \"copy:selection\" },\n            \"copyName\": { name: \"copyName\", text: \"Copy Name\", icon: \"file-txt\", command: \"CopyCommand\", options: \"copy:name\" },\n            \"copyDeclaration\": { name: \"copyDeclatarion\", text: \"Copy Declaration\", icon: \"file-data\", command: \"CopyCommand\", options: \"copy:declaration\" },\n            \"resize\": { name: \"resize\", text: \"Resize Column\", icon: \"arrows-left-right\", rules: \"isResizable\", command: \"ResizeColumnCommand\",softRules: \"isNotGroupColumn\" },\n            \"reset\": { name: \"reset\", text: \"Reset\", icon: \"arrow-rotate-ccw\", command: \"ResetCommand\", rules: \"isEditable\", softRules: \"isDirty;isNotInEditMode\" },\n            \"expandItem\": { name: \"expandItem\", text: \"Expand Item\", icon: \"folder-open\", softRules: \"isExpandable\", command: \"ToggleItemCommand\", options: \"expand:true\" },\n            \"collapseItem\": { name: \"collapseItem\", text: \"Collapse Item\", icon: \"folder\", softRules: \"isCollapsible\", command: \"ToggleItemCommand\", options: \"expand:false\" }\n        }\n    });\n\n    kendo.ui.propertygrid = kendo.ui.propertygrid || {};\n\n    extend(kendo.ui.propertygrid, {\n        ContextMenu: PropertyGridContextMenu\n    });\n})(window.kendo.jQuery);\n\n(function($, undefined$1) {\n    let kendo = window.kendo,\n        extend = $.extend,\n        Class = kendo.Class,\n        keys = kendo.keys,\n        COLUMNSIZE = \"#columnsize\";\n\n    let Command = Class.extend({\n        init: function(options) {\n            this.options = options;\n            this.propertyGrid = options.propertyGrid;\n        }\n    });\n\n    let CopyCommand = Command.extend({\n        exec: function() {\n            const that = this,\n                options = that.options,\n                propertyGrid = that.propertyGrid,\n                target = that.options.target.closest(\"tr\"),\n                dataItem = propertyGrid.dataItem(target);\n            if (options.copy == \"selection\") {\n                let sel = window.getSelection();\n                let range = sel.getRangeAt(0);\n                let selectedText = range.toString();\n\n                navigator.clipboard.writeText(selectedText);\n            } else if (options.copy == \"name\") {\n                navigator.clipboard.writeText(dataItem.field);\n            } else if (options.copy == \"declaration\") {\n                let value = that.propertyGrid._objectFromNodes(dataItem);\n                let tabDelimitedValue = [dataItem.field, JSON.stringify(value[dataItem.field]), dataItem.description].filter(item => item !== undefined$1).join(\"\\t\");\n                navigator.clipboard.writeText(tabDelimitedValue);\n            }\n        }\n    });\n\n    let ResetCommand = Command.extend({\n        exec: function() {\n            let that = this,\n                propertyGrid = that.propertyGrid,\n                target = that.options.target.closest(\"tr\"),\n                dataItem = propertyGrid.dataItem(target);\n\n            propertyGrid.dataSource.cancelChanges(dataItem);\n            propertyGrid.trigger(\"cancel\", { type: \"cancel\", model: dataItem, container: that.options.target });\n            propertyGrid._render();\n        }\n    });\n\n    let ResizeColumnCommand = Command.extend({\n        _actionButtonsTemplate: function({ apply, cancel, insertButtonIcon, cancelButtonIcon }) {\n            return '<div class=\"k-actions k-actions-start k-actions-horizontal k-window-buttons\">' +\n            kendo.html.renderButton(`<button class=\"k-dialog-apply\">${apply}</button>`, { themeColor: \"primary\", icon: insertButtonIcon }) +\n            kendo.html.renderButton(`<button class=\"k-dialog-close\">${cancel}</button>`, { icon: cancelButtonIcon }) +\n        '</div>';\n        },\n\n        exec: function() {\n            let that = this, dialog, form,\n                propertyGrid = that.propertyGrid,\n                tableColumnIndex = that.options.target.index(),\n                columnIndex = propertyGrid.grouped ? tableColumnIndex - 1 : tableColumnIndex,\n                columnSelector = `tr:not(.k-table-group-row):first > td:nth-child(${tableColumnIndex + 1})`,\n                oldColumnWidth = propertyGrid.table.find(columnSelector).outerWidth(),\n                dialogOptions = {\n                    title: \"Resize Column\",\n                    visible: false,\n                    resizable: true,\n                    minWidth: 350\n                },\n                totalWidth = propertyGrid.table.width();\n\n                adjustColWidths(that.propertyGrid);\n                propertyGrid.table.width(totalWidth);\n\n                function apply(e) {\n                    let delta;\n                    let oldColumnWidth = dialog.wrapper.find(\".k-form\").data(\"kendoForm\").options.formData.columnsize;\n                    let newColumnWidth = dialog.wrapper.find(COLUMNSIZE).data(\"kendoNumericTextBox\").value();\n\n                    if (oldColumnWidth == newColumnWidth) {\n                        close(e);\n                        return;\n                    } else if (oldColumnWidth > newColumnWidth) {\n                        delta = oldColumnWidth - newColumnWidth;\n                        propertyGrid.table.width(totalWidth - delta);\n                    } else {\n                        delta = newColumnWidth - oldColumnWidth;\n                        propertyGrid.table.width(totalWidth + delta);\n                    }\n\n                    propertyGrid.columns[columnIndex].width = newColumnWidth;\n                    propertyGrid.table.children(\"colgroup\").find(\"col\").eq(tableColumnIndex).width(newColumnWidth);\n\n                    propertyGrid.trigger(\"columnResize\", {\n                        column: propertyGrid.columns[columnIndex],\n                        oldWidth: oldColumnWidth,\n                        newWidth: newColumnWidth\n                    });\n\n                    close(e);\n                }\n\n                function close(e) {\n                    e.preventDefault();\n                    form.destroy();\n                    dialog.destroy();\n                }\n\n                function keyDown(e) {\n                    if (e.keyCode == keys.ENTER) {\n                        apply(e);\n                    } else if (e.keyCode == keys.ESC) {\n                        close(e);\n                    }\n                }\n\n                function adjustColWidths(component) {\n                    const columnSelector = (columnIndex) => `tr:not(.k-table-group-row):first > td:nth-child(${columnIndex + 1})`,\n                    colCount = component.table.children(\"colgroup\").find(\"col\").length;\n                    let widths = [];\n                    for (let idx = 0; idx < colCount; idx++) {\n                        widths.push(component.table.find(columnSelector(idx)).outerWidth());\n                    }\n\n                    component.table.children(\"colgroup\").find(\"col\").each((idx,col) => {\n                        $(col).width(widths[idx]);\n                    });\n                }\n\n                dialogOptions.close = close;\n\n                dialog = $(\"<div/>\").appendTo(document.body).kendoWindow(dialogOptions).data(\"kendoWindow\");\n                form = that._createForm(dialog, oldColumnWidth);\n                dialog.element.after($(that._actionButtonsTemplate({ apply: \"Apply\", cancel: \"Cancel\" , insertButtonIcon: \"check\", cancelButtonIcon: \"cancel-outline\" })));\n\n                dialog.wrapper\n                    .find(\".k-dialog-apply\").on(\"click\", apply).end()\n                    .find(\".k-dialog-close\").on(\"click\", close).end()\n                    .find(\".k-form-field input\").on(\"keydown\", keyDown).end();\n\n                    dialog.center().open();\n        },\n\n        _createForm: function(dialog, currentColumnWidth) {\n            let formElement = $(\"<div/>\").appendTo(dialog.element);\n\n            return formElement.kendoForm({\n                formData: {\n                    columnsize: currentColumnWidth\n                },\n                validation: {\n                    validateOnBlur: false,\n                    validaitonSummary: false\n                },\n                renderButtons: false,\n                items: [\n                    {\n                        field: \"columnsize\",\n                        label: \"Set column Size\",\n                        editor: \"NumericTextBox\",\n                        editorOptions: {\n                            min: 0\n                        }\n                    }\n                ]\n            }).data(\"kendoForm\");\n        }\n    });\n\n    let ToggleItemCommand = Command.extend({\n        exec: function() {\n            let that = this,\n            propertyGrid = that.propertyGrid,\n                target = that.options.target,\n                options = that.options,\n                expand = options.expand === 'true';\n\n                if (expand) {\n                    propertyGrid.expand(target);\n                } else {\n                    propertyGrid.collapse(target);\n                }\n        }\n    });\n\n    let ToggleGroupLayout = Command.extend({\n        exec: function() {\n            let that = this,\n            propertyGrid = that.propertyGrid,\n            grouped = propertyGrid.grouped;\n\n            propertyGrid.grouped = !grouped;\n            if ( !propertyGrid.grouped) {\n                propertyGrid.wrapper.find(\"tr:not(.k-details-box)\").removeClass(\"k-hidden\");\n            }\n\n            propertyGrid._refreshLayout();\n            propertyGrid._updateDetails();\n        }\n    });\n\n    let ToggleDetails = Command.extend({\n        exec: function() {\n            let that = this,\n            propertyGrid = that.propertyGrid,\n            visible = propertyGrid.visibleDetails;\n\n            propertyGrid.visibleDetails = !visible;\n            if ( !propertyGrid.visible) {\n                propertyGrid.table.find(\"tr.k-details-box\").toggleClass(\"k-hidden\");\n            }\n        }\n    });\n\n    let ExcelExport = Command.extend({\n        exec: function() {\n            let that = this,\n            propertyGrid = that.propertyGrid;\n\n            propertyGrid.saveAsExcel();\n        }\n    });\n\n    let PDFExport = Command.extend({\n        exec: function() {\n            let that = this,\n            propertyGrid = that.propertyGrid;\n\n            propertyGrid.saveAsPDF();\n        }\n    });\n\n    kendo.ui.propertygrid = kendo.ui.propertygrid || {};\n\n    extend(kendo.ui.propertygrid, {\n        PropertyGridCommand: Command,\n        commands: {\n            ResetCommand: ResetCommand,\n            CopyCommand: CopyCommand,\n            ResizeColumnCommand: ResizeColumnCommand,\n            ToggleItemCommand: ToggleItemCommand,\n            ToggleGroupLayout: ToggleGroupLayout,\n            ToggleDetails: ToggleDetails,\n            ExcelExport: ExcelExport,\n            PDFExport: PDFExport,\n        }\n    });\n})(window.kendo.jQuery);\n\nconst __meta__ = {\n    id: \"propertygrid\",\n    name: \"PropertyGrid\",\n    category: \"web\",\n    description: \"The PropertyGrid widget displays objects as hierarchical structure and provides means to edit the properties and attributes of objects.\",\n    depends: [\"excel\", \"menu\", \"treelist\", \"ooxml.cmn.chunk\"]\n};\n\n(function($, undefined$1) {\n    const kendo = window.kendo,\n        ui = kendo.ui,\n        NS = \".kendoPropertyGrid\",\n        extend = $.extend,\n        kendoDom = kendo.dom,\n        kendoDomElement = kendoDom.element,\n        kendoHtmlElement = kendoDom.html,\n        kendoTextElement = kendoDom.text,\n        keys = $.extend({ F10: 121 }, kendo.keys),\n        Editable = ui.Editable,\n        TreeList = ui.TreeList,\n        isArray = Array.isArray,\n        isPlainObject = $.isPlainObject,\n        CHANGE = \"change\",\n        CLICK = \"click\",\n        EDIT = \"edit\",\n        EXPAND = \"expand\",\n        COLLAPSE = \"collapse\",\n        GROUP_EXPAND = \"groupExpand\",\n        GROUP_COLLAPSE = \"groupCollapse\",\n        COLUMNRESIZE = \"columnResize\",\n        CELL_CLOSE = \"cellClose\",\n        SAVE = \"save\",\n        CANCEL = \"cancel\",\n        BEFORE_EDIT = \"beforeEdit\",\n        PDF_EXPORT = \"pdfExport\",\n        CARET_ALT_DOWN = \"a[class*='-i-caret-alt-down']\",\n        CARET_ALT_RIGHT = \"a[class*='-i-caret-alt-right']\",\n        DOT = \".\",\n        GROUPING_ROW = \"k-grouping-row\",\n        TR = \"tr\",\n        TD = \"td\",\n        ARIA_LABEL = \"aria-label\",\n        COLLAPSE_ICON = \"caret-alt-down\",\n        EXPAND_ICON = \"caret-alt-right\";\n\n    const defaultBodyContextMenu = [\n        \"copy\",\n        \"copyName\",\n        \"copyDeclaration\",\n        \"separator\",\n        \"reset\",\n        \"separator\",\n        \"resize\",\n        \"separator\",\n        \"expandItem\",\n        \"collapseItem\",\n        \"separator\"\n    ];\n\n    const defaultCommands = {\n        group: {\n            name: \"group\",\n            type: \"button\",\n            text: 'Group Items',\n            togglable: true,\n            showText: \"overflow\",\n            icon: \"categorize\",\n            commandName: \"ToggleGroupLayout\",\n            attributes: {\n                title: \"Group Items\"\n            },\n            overflow: \"never\"\n        },\n        details: {\n            name: \"details\",\n            type: \"button\",\n            text: 'Toggle Info box',\n            togglable: true,\n            icon: \"info-circle\",\n            commandName: \"ToggleDetails\",\n            showText: \"overflow\",\n            attributes: {\n                title: \"Toggle Info box\"\n            },\n            overflow: \"never\"\n        },\n        sort: {\n            name: \"sort\",\n            component: \"DropDownList\",\n            componentOptions: {\n                commandOn: CHANGE,\n                dataTextField: \"text\",\n                dataValueField: \"value\",\n                dataSource: [\n                    { text: \"Default Sort\", value: \"none\" },\n                    { text: \"Sort A-Z\", value: \"asc\" },\n                    { text: \"Sort Z-A\", value: \"desc\" }\n                ],\n            },\n            attributes: {\n                class: \"k-property-grid-sort\",\n                title: \"Sort\"\n            },\n            overflow: \"never\"\n        },\n        search: {\n            name: \"search\",\n            component: \"TextBox\",\n            componentOptions: {\n                prefixOptions: {\n                    icon: \"search\"\n                },\n                placeholder: \"Search...\",\n            },\n            attributes: {\n                class: \"k-grid-search\"\n            },\n            overflow: \"never\"\n        },\n        separator: {\n            name: \"separator\",\n            type: \"separator\",\n        },\n        spacer: {\n            name: \"spacer\",\n            type: \"spacer\",\n        },\n        excel: {\n            name: \"excel\",\n            type: \"button\",\n            text: \"Export to Excel\",\n            showText: false,\n            icon: \"file-excel\",\n            commandName: \"ExcelExport\",\n            overflow: \"auto\"\n        },\n        pdf: {\n            name: \"excel\",\n            type: \"button\",\n            text: \"Export to PDF\",\n            showText: false,\n            icon: \"file-pdf\",\n            commandName: \"PDFExport\",\n            overflow: \"auto\"\n        },\n    };\n\n    function isNullorUndefined(value) {\n        return value === undefined$1 || value === null;\n    }\n\n    function isCollection(value) {\n        return typeof value === 'object' && isArray(value);\n    }\n\n    function isComplexObject(value) {\n        return typeof value === 'object' && !kendo.isDate(value);\n    }\n\n    function isEditable(value) {\n        return (kendo.type(value) != 'object' && kendo.type(value) != 'function');\n    }\n\n    function isColumnEditable(column, model) {\n        if (!column || !model || !column.field || column.selectable || column.command || column.draggable || (column.editable && !column.editable(model))) {\n            return false;\n        }\n\n        return (column.field && model.editable && model.editable(column.field));\n    }\n\n    function asArray(obj) {\n        return Object.entries(obj).map(x=>x[1]);\n    }\n\n    let PropertyGridDataSource = kendo.data.TreeListDataSource.extend({\n        groupedItemsTree: function(field) {\n            let map = this._childrenMap(this.view()),\n                defaultParentId = this._defaultParentId(),\n                currentChildren = map[defaultParentId] || [],\n                grouped = new kendo.data.Query(currentChildren).group({ field: field }).toArray();\n\n            return grouped;\n        },\n        filterGroupedItemsTree: function(expression, field) {\n            let dataSource = this;\n            let sort = this.sort() || {};\n            let filterExpression = expression || { filters: [], logic: \"or\" };\n            let map = this._childrenMap(this.data()),\n            defaultParentId = this._defaultParentId(),\n            currentChildren = map[defaultParentId] || [],\n            groups = new kendo.data.Query(currentChildren).sort(sort).group({ field: field }).toArray();\n            let filterItems = function(filterExpression, items) {\n                let filtered = [];\n                for (let i = 0; i < items.length; i++) {\n                    if (items[i].hasChildren && filterItems(filterExpression, dataSource.childNodes(items[i])).length > 0) {\n                        filtered.push(items[i]);\n                    }\n                }\n\n                return filtered.length != 0 ? filtered : new kendo.data.Query(items).sort(sort).filter(filterExpression).toArray();\n            };\n            let filteredGroups = [];\n            groups.forEach(function(itm) {\n                if (itm.items) {\n                    itm.items = filterItems(filterExpression,itm.items);\n                }\n                filteredGroups.push(itm);\n            });\n\n            return filteredGroups;\n        }\n    });\n\n    const DynamicInCellEditor = kendo.ui.treelist.editor.extend({\n        createEditable: function() {\n            let options = this.options;\n\n            this.fields[0].editor = options.model.editor;\n            this.fields[0].editorOptions = { ...options.model.editorOptions };\n\n            this.editable = new Editable(this.wrapper, {\n                fields: this.fields,\n                target: options.target,\n                clearContainer: options.clearContainer,\n                model: this.model,\n                change: options.change,\n            });\n\n        },\n        destroy: function() {\n            let that = this;\n\n            that.editable.destroy();\n\n            that.editable.element\n                .off()\n                .empty()\n                .removeAttr(kendo.attr(\"role\"));\n\n            that.model = that.wrapper = that.element = that.columns = that.editable = null;\n        }\n    });\n\n    const PropertyGrid = TreeList.extend({\n        init: function(element, options) {\n            const that = this;\n            that._processOptions(options);\n            that.options = extend(true, {}, that.options, options);\n            that._processedModel = that._processModel();\n            that._createDataSource();\n\n            TreeList.fn.init.call(that, element, that.options);\n            that._wrapper();\n            that._detailsBox();\n            that._groupable();\n\n            kendo.notify(that);\n        },\n\n        options: {\n            name: 'PropertyGrid',\n            model: {},\n            items: [],\n            columns: [{ field: \"field\" },{ field: \"value\", editable: function(e) { return isEditable(e.value); } }],\n            hasHeader: false,\n            groupable: true,\n            resizable: true,\n            contextMenu: false,\n            sortable: true,\n            selectable: true,\n            scrollable: true,\n            showDetails: true,\n            editable: \"incell\",\n            size: \"medium\",\n            defaultTools: [defaultCommands.search, defaultCommands.sort, defaultCommands.group, defaultCommands.details],\n            messages: {\n                defaultGroupName: \"Other\"\n            }\n        },\n\n        events: [\n            BEFORE_EDIT,\n            EDIT,\n            CHANGE,\n            EXPAND,\n            COLLAPSE,\n            COLUMNRESIZE,\n            GROUP_EXPAND,\n            GROUP_COLLAPSE,\n            CELL_CLOSE,\n            SAVE,\n            CANCEL,\n            PDF_EXPORT\n        ],\n\n        defaultEditors: {\n            string: \"TextBox\",\n            date: \"DatePicker\",\n            number: \"NumericTextBox\",\n            boolean: \"CheckBox\"\n        },\n\n        _groupContentTemplate: ({ groupName, action, icon }) => `<p class=\"k-reset\">${kendo.ui.icon($('<a href=\"#\" tabindex=\"-1\" ' + ARIA_LABEL + '=' + action + '></a>'), icon)}${groupName}</p>`,\n\n        _detailsTemplate: ({ description }) => `<span>${description || '&nbsp;'}</span>`,\n\n        _setEditable: function(value) {\n            const that = this;\n            that.options.editable = value;\n        },\n\n        _processOptions: function(options) {\n            const that = this;\n\n            kendo.type(options.editMode) === \"boolean\" && !options.editMode ? that._setEditable(false) : that._setEditable(\"incell\");\n            if (isNullorUndefined(options.toolbar)) {\n                options.toolbar = that.options.defaultTools;\n            }\n            that._extendColumnOptions(options);\n        },\n\n        _extendColumnOptions: function(options) {\n            const that = this;\n            if (!options.columns) {\n                return;\n            }\n            that.options.columns[0] = extend(true, options.columns.fieldColumn, that.options.columns[0]);\n            that.options.columns[1] = extend(true, options.columns.valueColumn, that.options.columns[1]);\n            delete options.columns;\n        },\n\n        _processSettings: function(obj, settings) {\n            const that = this;\n            settings.forEach((item) => {\n                if (obj[item.field]) {\n                    extend(obj[item.field], item);\n\n                    if (obj[item.field].items) {\n                        that._processSettings(obj[item.field].value, obj[item.field].items);\n                    }\n                }\n            });\n        },\n\n        _processModel: function() {\n            const that = this,\n            model = that.options.model,\n            options = that.options;\n\n            let flatData = that._flatten(model);\n            that._setDefaults(flatData);\n            that._processSettings(flatData, options.items );\n\n            return asArray(flatData);\n        },\n\n        _createDataSource: function() {\n            const that = this,\n            dataSource = new PropertyGridDataSource({\n                data: that._processedModel,\n                serverGrouping: false,\n                schema: {\n                    model: {\n                        id: \"id\",\n                        parentId: \"parentId\",\n                        expanded: true,\n                        fields: {\n                            field: { editable: false },\n                            value: { editable: true }\n                        }\n                    },\n                }\n            });\n\n            that.options.dataSource = dataSource;\n        },\n\n        _flatten: function(model) {\n            let id = 1;\n\n            function appendNested(result, key, nestedKeys, nestedObject, collectionIdx) {\n                if (!isNullorUndefined(collectionIdx)) {\n                    nestedKeys.forEach (nestedKey => {\n                        result[`${key}.${collectionIdx}.${nestedKey}`] = nestedObject[nestedKey];\n                        result[`${key}.${collectionIdx}.${nestedKey}`].parentId = result[`${key}.${collectionIdx}`].id;\n                    });\n                } else {\n                    nestedKeys.forEach (nestedKey => {\n                        result[`${key}.${nestedKey}`] = nestedObject[nestedKey];\n                    });\n                }\n            }\n\n            function flattenCollection(result, obj, key, parentId) {\n                const collection = obj[key];\n\n                result[key] = {\n                    id: id++,\n                    parentId: parentId,\n                    propType: \"Array\",\n                    field: key,\n                    value: collection,\n                };\n\n                for (let i = 0; i < collection.length; i++) {\n                    const nested = typeof collection[i] === \"object\" ?\n                        flattenObject(collection[i], result[key].id) :\n                        collection[i];\n\n                    result[`${key}.${i}`] = {\n                        id: id++,\n                        parentId: result[key].id,\n                        propType: typeof obj[key],\n                        field: `${key}[${i}]`,\n                        value: nested\n                    };\n\n                    if (typeof collection[i] === \"object\") {\n                        const nestedKeys = Object.keys(nested);\n                        appendNested(result, key, nestedKeys, nested, i);\n                    }\n                }\n            }\n\n            function flattenObject(obj, parentId) {\n                const result = {},\n                keys = Object.keys(obj || { } );\n\n                keys.forEach ((key) => {\n                    if (isNullorUndefined(obj[key])) {\n                        result[key] = {\n                            id: id++,\n                            parentId: parentId,\n                            propType: typeof obj[key],\n                            field: key,\n                            value: obj[key]\n                        };\n                    } else if (isCollection(obj[key])) {\n                        flattenCollection(result, obj, key, parentId);\n                    } else if (isComplexObject(obj[key])) {\n                        let tempId = id++;\n                        const nestedObject = flattenObject(obj[key], tempId);\n                        const nestedKeys = Object.keys(nestedObject);\n\n                        result[key] = {\n                            id: tempId,\n                            parentId: parentId,\n                            propType: typeof obj[key],\n                            field: key,\n                            value: nestedObject,\n                        };\n\n                        appendNested(result, key, nestedKeys, nestedObject);\n                    } else {\n                        let parsed = kendo.parseDate(obj[key].toString());\n                        result[key] = {\n                            id: id++,\n                            parentId: parentId,\n                            propType: parsed != null ? typeof parsed : typeof obj[key],\n                            field: key,\n                            value: parsed != null ? parsed : obj[key]\n                        };\n                    }\n                });\n\n                return result;\n            }\n\n            return flattenObject(model, null);\n        },\n\n        _setDefaults: function(obj) {\n            const that = this;\n\n            Object.keys(obj).forEach(key => {\n                if (that.options.groupable && !obj[key].group) {\n                    obj[key].group = that.options.messages.defaultGroupName;\n                }\n                that._setDefaultEditor(obj[key]);\n            });\n        },\n\n        _setDefaultEditor: function(obj) {\n            const that = this,\n            type = kendo.type(obj.value);\n            switch (type) {\n                case \"date\":\n                    obj.editor = that.defaultEditors.date;\n                    break;\n                case \"boolean\":\n                    obj.editor = that.defaultEditors.boolean;\n                    break;\n                case \"number\":\n                    obj.editor = that.defaultEditors.number;\n                    break;\n                default:\n                    obj.editor = that.defaultEditors.string;\n                    break;\n            }\n        },\n\n        _createIncellEditor: function(cell, options) {\n            const that = this;\n            let column = extend({}, options.columns[0]);\n            options.model.fields.value.validation = options.model.validation ? options.model.validation.toJSON() : {};\n            delete column.parentColumn;\n\n            return new DynamicInCellEditor(cell, extend({}, {\n                fieldRenderer: that._cellContent.bind(that),\n                appendTo: that.wrapper,\n                clearContainer: false,\n                target: that,\n                columns: [column],\n                model: options.model,\n                change: options.change\n            }));\n        },\n\n        _createDirtyTemplate: function(model) {\n            const that = this;\n            let templateSettings = that._customTemplateSettings();\n            let dirtyIndicator = function(data) {\n                    return '<span class=\"k-dirty\"></span>';\n                };\n            let templateFunction = function(data) {\n                return (dirtyIndicator() + kendo.template(model.template)(model));\n            };\n\n            return kendo.template(templateFunction, templateSettings).bind({ columnTemplate: model.template });\n        },\n\n        _cellContent: function(column, model) {\n            const that = this,\n            incellEditing = that._isIncellEditable(),\n            isValueColumn = column.field == \"value\";\n            let value, dirtyIndicator, template;\n\n            if (isValueColumn && model.template) {\n                template = model.dirty ? that._createDirtyTemplate(model) : kendo.template(model.template);\n                value = template(model);\n            } else if (column.field) {\n                value = model.get(column.field);\n                dirtyIndicator = incellEditing ? column.dirtyIndicatorTemplate(model) : \"\";\n                if (!isNullorUndefined(value)) {\n                    if (model.format) {\n                        value = kendo.format(model.format, value);\n                    }\n\n                    value = dirtyIndicator + value;\n                } else {\n                    value = dirtyIndicator;\n                }\n            } else if (isNullorUndefined(value)) {\n                value = \"\";\n            }\n\n            if (model.template) {\n                return kendoHtmlElement(value);\n            } else {\n                if (incellEditing) {\n                    return isEditable(model.value) && isValueColumn ? that._editableCellContent(value) : kendoHtmlElement(value);\n                } else {\n                    return kendoTextElement(value);\n                }\n            }\n        },\n\n        _editableCellContent: function(value) {\n            let bTag = kendoDomElement(\"b\");\n            let content = kendoHtmlElement(value);\n            bTag.children.push(content);\n            return bTag;\n        },\n\n        _generateGroupRow: function(item) {\n            const that = this;\n            let groupRowContent = (kendo.template(that._groupContentTemplate)({\n                groupName: item.value,\n                action: item.visible ? COLLAPSE : EXPAND,\n                icon: item.visible ? COLLAPSE_ICON : EXPAND_ICON\n            }));\n            let tdElement = kendoDomElement(TD, { className: \"k-table-td\", class: \"k-table-td\", colSpan: \"3\" , role: \"gridcell\", \"aria-expanded\": item.visible, visible: true }, [kendo.dom.html(groupRowContent)] );\n            let trElement = kendoDomElement(TR, { className: \"k-table-group-row k-grouping-row k-table-row\", role: \"row\" , \"data-uid\": item.uid }, [tdElement] );\n            return trElement;\n        },\n\n        _generateDetailsBox: function() {\n            const that = this;\n            let tdElement = kendoDomElement(TD, { className: \"k-table-td\", class: \"k-table-td\", colSpan: that.grouped ? 3 : 2 , role: \"gridcell\", visible: true }, [kendo.dom.html(\"<span>&nbsp;</span>\")] );\n            let trElement = kendoDomElement(TR, {\n                className: `k-details-box k-bottom k-sticky k-footer-template k-table-row ${!that.visibleDetails ? 'k-hidden' : ''}`,\n                role: \"row\"\n            }, [tdElement] );\n            return trElement;\n        },\n\n        _renderRows: function(options, data, columns, selected, childrenMap, viewChildrenMap, hasFooterTemplate) {\n            const that = this;\n            let selectedRow = selected.length ? selected : that._selectedRowUid;\n            let rows = [];\n            if (that.grouped) {\n                if (that.table.find(\">colgroup>col.k-group-col\").length === 0) {\n                    that.table.find(\">colgroup\").prepend('<col class=\"k-group-col\">');\n                }\n                that._groupedData.forEach(item => {\n                    let groupTr = that._generateGroupRow(item);\n\n                    rows.push(groupTr);\n                    rows = rows.concat(that._trs({\n                        columns: columns,\n                        editedColumn: options.editedColumn,\n                        editedColumnIndex: options.editedColumnIndex,\n                        aggregates: options.aggregates,\n                        selected: selectedRow,\n                        data: item.items,\n                        childrenMap: childrenMap,\n                        viewChildrenMap: viewChildrenMap,\n                        hasFooterTemplate: hasFooterTemplate,\n                        visible: item.visible,\n                        level: 0\n                    }));\n                });\n            } else {\n                that.table.find(\">colgroup>col.k-group-col\").remove();\n                rows = rows.concat(this._trs({\n                    columns: columns,\n                    editedColumn: options.editedColumn,\n                    editedColumnIndex: options.editedColumnIndex,\n                    aggregates: options.aggregates,\n                    selected: selectedRow,\n                    data: data,\n                    childrenMap: childrenMap,\n                    viewChildrenMap: viewChildrenMap,\n                    hasFooterTemplate: hasFooterTemplate,\n                    visible: true,\n                    level: 0\n                }));\n            }\n\n            if (that.options.showDetails) {\n                rows.push(that._generateDetailsBox());\n            }\n\n            that._contentTree.render(rows);\n        },\n\n        _generateRowOptions: function(model, attr, pageable, options, level, hasChildren) {\n            const that = this;\n\n            let rowOptions = {\n                model: model,\n                attr: attr,\n                level: pageable ? that._renderedModelLevel(model, options) : level,\n                editedColumn: options.editedColumn,\n                editedColumnIndex: options.editedColumnIndex,\n                hasChildren: hasChildren,\n                visible: options.visible,\n                isAlt: this._absoluteIndex % 2 === 0,\n                grouped: that.options.groupable && that.grouped\n            };\n            return rowOptions;\n        },\n\n        _renderRow: function(rowOptions, columns, renderer) {\n            let row = this._tds(rowOptions, columns, renderer);\n\n            if (rowOptions.grouped) {\n                let groupTdElement = kendoDomElement(TD, { class: \"k-table-td k-group-cell\", className: \"k-table-td k-group-cell\" });\n                row.children.splice(0,0,groupTdElement);\n            }\n            return row;\n        },\n\n        editCell: function(cell) {\n            const that = this;\n            let cellIndex;\n            cell = $(cell);\n            cellIndex = that.grouped ? that.cellIndex(cell) - 1 : that.cellIndex(cell);\n            let column = that.columns[cellIndex];\n            let model = that.dataItem(cell);\n\n            if (that._isIncellEditable() && model && isColumnEditable(column, model)) {\n                that._editCell(cell, column, model, cellIndex);\n            }\n        },\n\n        _wrapper: function() {\n            const that = this;\n            that.element.css(\"width\", this.options.width);\n            that.wrapper.addClass(\"k-property-grid\");\n        },\n\n        _toolbar: function() {\n            const that = this,\n            options = that.options;\n            let toolbarOptions = options.toolbar;\n            let toolbar = this.toolbar;\n\n\n            if (!toolbarOptions) {\n                return;\n            }\n\n            if (Array.isArray(toolbarOptions)) {\n                let items = that._processToolbarItems(toolbarOptions);\n                items = that._verifyItems(items);\n\n                toolbar.kendoToolBar({\n                    size: \"medium\",\n                    resizable: true,\n                    navigateOnTab: !options.navigatable,\n                    items: items,\n                });\n\n                toolbar.find(\".k-grid-search .k-input-inner\").attr({\n                    placeholder: options.messages.commands.search,\n                    title: options.messages.commands.search\n                });\n\n                that._attachToolbarHandlers();\n            } else {\n                toolbar.append(kendo.template(toolbarOptions)({}));\n            }\n\n        },\n\n        _attachToolbarHandlers: function() {\n            const that = this;\n            let toolbarWidget = that.toolbar.getKendoToolBar();\n            let sortElement = toolbarWidget.element.find('[data-command=\"sort\"] input');\n\n            toolbarWidget.bind(\"toggle\", that._toolbarClick.bind(that));\n            toolbarWidget.bind(\"click\", that._toolbarClick.bind(that));\n\n            if (sortElement.length > 0) {\n                sortElement.getKendoDropDownList().bind(\"change\", that._sortItems.bind(that));\n            }\n        },\n\n        _verifyItems: function(items) {\n            const that = this;\n            if ((!that.options.groupable || !that.options.items.some(x=>x.hasOwnProperty(\"group\")) )) {\n                items = items.filter(x=>x.name != \"group\");\n            }\n            if (!(that.options.showDetails && that.options.selectable) && items.findIndex(x=>x.name == \"details\") > 0) {\n                items = items.filter(x=>x.name != \"details\");\n            }\n            return items;\n        },\n\n        _getCommandType: function(command) {\n            if (command.type) {\n                return command.type;\n            }\n\n            if (command.template) {\n                return null;\n            }\n\n            return \"button\";\n        },\n\n        _processToolbarItems: function(commands) {\n            const that = this,\n            messages = that.options.messages.commands;\n            let items = [];\n\n            commands.map(command => {\n                let name = (isPlainObject(command) ? command.name || \"\" : command).toLowerCase();\n                let text = messages[name];\n\n                if (!name && !(isPlainObject(command) && command.template)) {\n                    throw new Error(\"Commands should have name specified\");\n                }\n\n                command = extend({}, defaultCommands[name], {\n                    name: name,\n                    text: text || (defaultCommands[name] || {}).text,\n                    type: that._getCommandType(defaultCommands[name] || {})\n                }, command);\n\n                if (command.imageClass) {\n                    command.spriteCssClass = command.imageClass;\n                    command.iconClass = command.imageClass;\n                }\n\n                if (!command.attributes) {\n                    command.attributes = {};\n                }\n\n                command.attributes[\"data-command\"] = command.commandName || name;\n\n                if (command.menuButtons || command.buttons) {\n                    delete command.name;\n                }\n\n                command.click = (e) => {\n                    let origEvent = e.event || e.originalEvent;\n                    if (origEvent) {\n                        origEvent.preventDefault();\n                        origEvent.stopPropagation();\n                    }\n\n                    that._commandClick({\n                        currentTarget: e.target\n                    });\n                };\n\n                if (command.className) {\n                    if (!command.attributes) {\n                        command.attributes = {};\n                    }\n\n                    command.attributes[\"class\"] = command.className;\n                }\n                command.attributes[\"title\"] = text || command.attributes[\"title\"];\n\n                items.push(command);\n            });\n\n            return items;\n        },\n\n        _toolbarClick: function(ev) {\n            let command = $(ev.target).data(\"command\"),\n                options = $(ev.target).data(\"options\");\n\n            if (!!$(ev.target).val()) {\n                options = extend({}, options, { value: $(ev.target).val() });\n            }\n\n            if (!command || !ui.propertygrid.commands[command] ) {\n                return;\n            }\n\n            this._action({\n                command: command,\n                options: options\n            });\n        },\n\n        _sortItems: function(e) {\n            const that = this,\n\n            dataSource = that.dataSource,\n            dir = e.sender.value();\n            let sort = dir === \"none\" ? {} : { field: \"field\", dir: dir };\n\n            dataSource.sort(sort);\n            that._groupedData = dataSource.filterGroupedItemsTree(dataSource.filter(),\"group\").map(itm => ({\n                ...itm,\n                visible: that._groupedData.filter(x=>x.value == itm.value)[0].visible,\n                uid: that._groupedData.filter(x=>x.value == itm.value)[0].uid\n            }));\n\n            if (that.grouped) {\n                that.refresh();\n            }\n        },\n\n        _initContextMenu: function() {\n            const that = this,\n            options = that.options;\n\n            if (!options.contextMenu) {\n                return;\n            }\n\n            let tbodyContextMenu = isPlainObject(options.contextMenu) && isArray(options.contextMenu.body) ? { items: options.contextMenu.body } : { items: defaultBodyContextMenu };\n\n            let mainOptions = isPlainObject(options.contextMenu) ? options.contextMenu : {};\n\n            tbodyContextMenu = extend({}, {\n                messages: options.messages,\n                target: that.tbody,\n                filter: \".k-table-row:not(.k-grouping-row,.k-details-box) > .k-table-td\",\n                action: that._action.bind(that),\n                states: that._buildStates()\n            }, mainOptions, tbodyContextMenu);\n\n            that.tbodyContextMenu = new ui.propertygrid.ContextMenu(\"<ul></ul>\", tbodyContextMenu);\n        },\n\n        _buildStates: function() {\n            const that = this;\n\n            return {\n                isResizable: that.options.resizable,\n                isEditable: that.options.editable,\n                windowHasSelection: () => (typeof window.getSelection != 'undefined' && window.getSelection().rangeCount != 0 && window.getSelection().getRangeAt(0).toString() != ''),\n                isDirty: (target)=> {\n                    let dataItem = this.dataItem(target);\n                    return dataItem.dirty;\n                },\n                isNotInEditMode: (target) => !target.closest(\"td\").hasClass(\"k-edit-cell\"),\n                isNotGroupColumn: (target) => !target.closest(\"td\").hasClass(\"k-group-cell\"),\n                isExpandable: (target) => {\n                    let dataItem = this.dataItem(target);\n                    return (dataItem && dataItem.hasChildren && !dataItem.expanded);\n                },\n                isCollapsible: (target) => {\n                    let dataItem = this.dataItem(target);\n                    return (dataItem && dataItem.hasChildren && dataItem.expanded);\n                }\n            };\n        },\n\n        _action: function(args) {\n            let commandName = args.command,\n                commandOptions = extend({ propertyGrid: this }, args.options),\n                command = new ui.propertygrid.commands[commandName](commandOptions);\n\n            return command.exec();\n        },\n\n        _objectFromNodes: function(rootNodes) {\n            const that = this,\n            hashTable = Object.create(null),\n            dataSource = that.dataSource;\n            rootNodes = isArray(rootNodes) ? rootNodes : [rootNodes];\n\n            rootNodes.forEach((node) => {\n                if (node.propType == \"Array\") {\n                    hashTable[node.field] = [];\n                    dataSource.childNodes(node).forEach((childNode) => {\n                        hashTable[node.field].push(childNode.hasChildren ? that._objectFromNodes(dataSource.childNodes(childNode)) : childNode.value);\n                    });\n                } else {\n                    hashTable[node.field] = node.hasChildren ? that._objectFromNodes(dataSource.childNodes(node)) : node.value;\n                }\n            });\n\n            return hashTable;\n        },\n\n        _groupable: function() {\n            const that = this;\n            that._groupedData = that.dataSource.groupedItemsTree(\"group\").map(itm => ({ ...itm, visible: true, uid: kendo.guid() }));\n            that._groupableClickHandler = function(e) {\n                let element = $(this),\n                groupRow = element.closest(TR);\n\n                let group = that._groupedData.filter(x=>x.value === groupRow.text())[0];\n                group.visible = !group.visible;\n\n                if (element.is(CARET_ALT_DOWN)) {\n                    if (!that.trigger(GROUP_COLLAPSE, { group: group.items, element: groupRow })) {\n                        that.refresh();\n                    }\n                } else {\n                    if (!that.trigger(GROUP_EXPAND, { group: group.items, element: groupRow })) {\n                        that.refresh();\n                    }\n                }\n                e.preventDefault();\n                e.stopPropagation();\n            };\n\n            that.table.on(CLICK + NS, \".k-grouping-row \" + CARET_ALT_RIGHT + \", .k-grouping-row \" + CARET_ALT_DOWN, that._groupableClickHandler)\n                .on(\"keydown\" + NS, that._groupRowKeyDown.bind(that));\n\n        },\n\n        _groupRowKeyDown: function(e) {\n            const that = this,\n            current = that.current();\n            let handled = false;\n\n            if (!that.options.navigatable) {\n                return;\n            }\n\n            if (e.keyCode == keys.ENTER) {\n                kendo.focusElement(that.table);\n                that._setCurrent(that._findCurrentCell());\n                handled = true;\n            }\n\n            if ((e.keyCode == keys.LEFT || e.keyCode == keys.RIGHT) && e.altKey) {\n                handled = this._handleGroupRowExpandCollapse(current, e.keyCode);\n            }\n\n            if (handled) {\n                e.preventDefault();\n                e.stopPropagation();\n            }\n        },\n\n        _handleGroupRowExpandCollapse: function(current, keyCode) {\n            const that = this,\n                row = current.parent();\n\n            if (row.is(DOT + GROUPING_ROW)) {\n                let visible = that._groupedData.filter(x=>x.value === row.text())[0].visible;\n\n                if (visible && keyCode == keys.LEFT || !visible && keyCode == keys.RIGHT) {\n                    that._toggleGroup(row);\n                    return true;\n                }\n\n            }\n        },\n\n        _toggleGroup: function(groupRow) {\n            const that = this;\n            let group = that._groupedData.filter(x=>x.value === groupRow.text())[0];\n                group.visible = !group.visible;\n                that.refresh();\n        },\n\n        _getGroupedData: function(expression) {\n            let that = this;\n            return that.dataSource.filterGroupedItemsTree(expression,\"group\").map(itm => ({ ...itm, visible: true, uid: that._groupedData.filter(x=>x.value == itm.value)[0].uid }));\n        },\n\n        _search: function(e) {\n            let that = this;\n            let input = e.currentTarget;\n            clearTimeout(that._searchTimeOut);\n            that._searchTimeOut = setTimeout(function() {\n                that._searchTimeOut = null;\n                let options = that.options,\n                searchFields = options.search ? options.search.fields : [\"field\",\"value\"],\n                expression = { filters: [], logic: \"or\" },\n                value = input.value;\n\n                if (value) {\n                    for (let i = 0; i < searchFields.length; i++) {\n                        expression.filters.push({ field: searchFields[i], operator: \"contains\", value: value });\n                    }\n                }\n\n                that._groupedData = that._getGroupedData(expression,\"group\");\n                that.dataSource.filter(expression);\n                that._refreshLayout();\n                that._updateDetails();\n            }, 300);\n        },\n\n        _refreshLayout: function() {\n            const that = this;\n            that._selectedRowUid = that.select().removeClass(\"k-selected\").map(function(_, row) {\n                return $(row).attr(\"data-uid\");\n            });\n            that._contentTree.render([]);\n            that._render();\n        },\n\n        _detailsBox: function() {\n            const that = this,\n            options = that.options;\n\n            that._detailsTemplate = options.detailsTemplate ? options.detailsTemplate : that._detailsTemplate;\n\n            if (!options.showDetails) {\n                return;\n            }\n\n            that.detailsContainer = that.wrapper.find(\"table > tr.k-details-box > td\");\n            that.bind(CHANGE, that._updateDetails);\n        },\n\n        _updateDetails: function() {\n            const that = this;\n            if (!that.options.selectable) {\n                return;\n            }\n            let dataItem = that.dataItem(that.select());\n\n            dataItem ? that.table.find(\"tr.k-details-box > td\").html(kendo.template(that._detailsTemplate)(dataItem)) : that._clearDetails();\n        },\n\n        _clearDetails: function() {\n            const that = this;\n            let content = '<span>&nbsp;</span>';\n            that.table.find(\"tr.k-details-box > td\").html(content);\n        },\n\n        model: function(model, items) {\n            const that = this;\n            if (!model) {\n                return that._objectFromNodes(that.dataSource.rootNodes());\n            }\n\n            that.options.model = model;\n            if (items) {\n                that.options.items = items;\n            }\n\n            that._processedModel = that._processModel();\n            that.setDataSource(new PropertyGridDataSource({\n                data: that._processedModel,\n                serverGrouping: false,\n                schema: {\n                    model: {\n                        id: \"id\",\n                        parentId: \"parentId\",\n                        expanded: true,\n                        fields: {\n                            field: { editable: false },\n                            value: { editable: true }\n                        }\n                    },\n                }\n            }));\n\n        },\n\n        selectItem: function(value) {\n            const that = this;\n            return that.select(value);\n        },\n\n        toggleItem: function(row) {\n            const that = this;\n            const dataItem = that.dataItem(row);\n\n            dataItem.expanded ? that.collapse(row) : that.expand(row);\n        },\n\n        toggleGroup: function(row) {\n            const that = this;\n            if (!$(row).is(DOT + GROUPING_ROW)) {\n                return;\n            }\n\n           that._toggleGroup(row);\n        },\n\n        toggleDetails: function() {\n            const that = this;\n            if (!that.options.showDetails) {\n                return;\n            }\n\n            that._action({ command: \"ToggleDetails\" });\n        },\n\n        edit: function(cell) {\n            const that = this;\n            that.editCell(cell);\n        },\n\n        saveState: function() {\n            const that = this;\n            that.saveChanges();\n        },\n\n        resetState: function() {\n            const that = this;\n            that.cancelChanges();\n        },\n\n        setOptions: function(options) {\n            const that = this;\n            let currentOptions = that.getOptions(),\n            wrapper = that.wrapper,\n            events = that._events,\n            element = that.element;\n\n            delete currentOptions.model;\n            kendo.deepExtend(currentOptions, options);\n            that.model = that.options.model = options.model || { };\n\n            that.destroy();\n\n            if (wrapper[0] !== element[0]) {\n                wrapper.before(element);\n                wrapper.remove();\n            }\n            element.empty();\n\n            that.init(element, currentOptions, events);\n            that._setEvents(currentOptions);\n        },\n\n        destroy: function() {\n            const that = this;\n            if (this.tbodyContextMenu) {\n                this.tbodyContextMenu.destroy();\n                this.tbodyContextMenu = null;\n            }\n\n            TreeList.fn.destroy.call(that);\n        },\n\n    });\n\n\n    function hierarchyRows() {\n        let this$1$1 = this;\n        let depth = this._depth();\n        let data = this.data;\n        let hasFooter = this._hasFooterTemplate();\n        let rows = [];\n        let parents = [];\n\n        if (!hasFooter) {\n            this.collapsible = false;\n        }\n\n        if (this$1$1.options.widget.grouped) {\n            data = this$1$1.options.widget.dataSource.groupedItemsTree(\"group\");\n            let colSpan = depth + this$1$1.options.widget.columns.length;\n            this$1$1.options._buildGroupedDataRows(data, rows, colSpan);\n        } else {\n            this$1$1.options._buildDataRows(data, rows, parents);\n        }\n        this._prependHeaderRows(rows);\n\n        return rows;\n    }\n\n    let PropertyGridExcelExporter = kendo.Class.extend({\n        init: function(options) {\n            options._buildDataRows = this._buildDataRows.bind(this);\n            options._buildGroupedDataRows = this._buildGroupedDataRows.bind(this);\n            this._instance = new ExcelExporter(options);\n            this._instance._hierarchyRows = hierarchyRows.bind(this);\n\n            options.columns = this._trimColumns(options.columns || []);\n\n            this.allColumns = $.map(this._leafColumns(options.columns || []), (column) => this._prepareColumn(column));\n\n            this.columns = this._visibleColumns(this.allColumns);\n            this.widget = options.widget;\n            this.options = options;\n            this.data = options.data || [];\n            this.aggregates = options.aggregates || {};\n            this.groups = [].concat(options.groups || []);\n            this.hasGroups = this.groups.length > 0;\n            this.hierarchy = options.hierarchy;\n            this.hasGroupHeaderColumn = this.columns.some(function(column) { return column.groupHeaderColumnTemplate; });\n            this.collapsible = this.options.collapsible;\n        },\n\n        _recursiveRows: function(rows, item) {\n            let this$1$1 = this;\n            let level = this$1$1.widget.dataSource.level(item);\n            rows.push(...this$1$1._dataRow(item, level + 1, this._depth()));\n\n            if (item.hasChildren) {\n                let children = this$1$1.widget.dataSource.childNodes(item);\n                for (let itmIdx = 0; itmIdx < children.length; itmIdx++) {\n                    let item = children[itmIdx];\n\n                    this._recursiveRows(rows,item);\n                }\n            }\n        },\n\n        _buildGroupedDataRows: function(data, rows, colSpan) {\n            for (let idx = 0; idx < data.length; idx++) {\n                let groupItem = data[idx];\n                rows.push({\n                    type: \"group-header\",\n                    cells: [ {\n                        value: groupItem.value,\n                        colSpan: colSpan,\n                        background: \"#dfdfdf\",\n                        color: \"#333\",\n                    } ],\n                    level: null\n                });\n                for (let itmIdx = 0; itmIdx < groupItem.items.length; itmIdx++) {\n                    let item = groupItem.items[itmIdx];\n\n                    this._recursiveRows(rows,item);\n                }\n            }\n        },\n\n        _buildDataRows: function(data, rows, parents) {\n            let this$1$1 = this;\n            let depth = this._depth();\n            let itemLevel = this.hierarchy.itemLevel;\n            let itemId = this.hierarchy.itemId;\n            let hasFooter = this._hasFooterTemplate();\n            let previousLevel = 0;\n            let previousItemId;\n\n            for (let idx = 0; idx < data.length; idx++) {\n                let item = data[idx];\n                let level = itemLevel(item, idx);\n\n                if (hasFooter) {\n                    if (level > previousLevel) {\n                        parents.push({ id: previousItemId, level: previousLevel });\n                    } else if (level < previousLevel) {\n                        rows.push(...this$1$1._hierarchyFooterRows(parents, level, depth));\n                    }\n\n                    previousLevel = level;\n                    previousItemId = itemId(item, idx);\n                }\n\n                rows.push(...this$1$1._dataRow(item, level + 1, depth));\n            }\n\n            if (hasFooter) {\n                rows.push(...this._hierarchyFooterRows(parents, 0, depth));\n\n                let rootAggregate = data.length ? this.aggregates[data[0].parentId] : {};\n                rows.push(this._hierarchyFooter(rootAggregate, 0, depth));\n            }\n        },\n    });\n\n    kendo.getAllMethods(ExcelExporter).forEach((func) => kendo.createProxyMember(PropertyGridExcelExporter, func));\n\n    kendo.PropertyGridExcelExporter = kendo.ExcelExporter.extend({\n        workbook: function() {\n            return $.Deferred((function(d) {\n                this.dataSource.fetch()\n                    .then((function() {\n                        let exporter = new PropertyGridExcelExporter(extend({}, this.options, this._hierarchy(), {\n                            data: this.dataSource.view(),\n                            groups: this.dataSource.group(),\n                            aggregates: this.dataSource.aggregates()\n                        }));\n\n                        let workbook = exporter.workbook();\n                        d.resolve(workbook, this.dataSource.view());\n                    }).bind(this));\n            }).bind(this)).promise();\n        }\n    });\n\n    let PropertyGridExcelMixin = {\n        extend: function(proto) {\n           proto.events.push(\"excelExport\");\n           proto.options.excel = $.extend(proto.options.excel, this.options);\n           proto.saveAsExcel = this.saveAsExcel;\n        },\n        options: {\n            proxyURL: \"\",\n            filterable: false,\n            fileName: \"Export.xlsx\"\n        },\n        saveAsExcel: function() {\n            let excel = this.options.excel || {};\n\n            let exporter = new kendo.PropertyGridExcelExporter({\n                widget: this,\n                columns: this.columns,\n                dataSource: this.dataSource,\n                data: this.dataSource.data(),\n                allPages: excel.allPages,\n                filterable: excel.filterable,\n                hierarchy: excel.hierarchy,\n                collapsible: excel.collapsible\n            });\n\n            exporter.workbook().then((function(book, data) {\n                if (!this.trigger(\"excelExport\", { workbook: book, data: data })) {\n                    let workbook = new kendo.ooxml.Workbook(book);\n\n                    if (!workbook.options) {\n                        workbook.options = {};\n                    }\n                    workbook.options.skipCustomHeight = true;\n\n                    workbook.toDataURLAsync().then(function(dataURI) {\n                        kendo.saveAs({\n                            dataURI: dataURI,\n                            fileName: book.fileName || excel.fileName,\n                            proxyURL: excel.proxyURL,\n                            forceProxy: excel.forceProxy\n                        });\n\n                        exporter._restoreExpandedState();\n                    });\n\n                }\n            }).bind(this));\n        },\n    };\n\n    kendo.PropertyGridExcelMixin = PropertyGridExcelMixin;\n\n    if (kendo.ooxml && kendo.ooxml.Workbook) {\n        PropertyGridExcelMixin.extend(PropertyGrid.prototype);\n    }\n\n    kendo.ui.propertygrid = kendo.ui.propertygrid || {};\n\n    extend(kendo.ui.propertygrid, {\n        defaultBodyContextMenu: defaultBodyContextMenu,\n    });\n\n    kendo.cssProperties.propertyDictionary[\"PropertyGrid\"] = kendo.cssProperties.propertyDictionary[\"TreeList\"];\n    kendo.cssProperties.registerPrefix(\"PropertyGrid\", \"k-property-grid-\");\n\n    kendo.ui.plugin(PropertyGrid);\n})(window.kendo.jQuery);\nvar kendo$1 = kendo;\n\nexport { __meta__, kendo$1 as default };\n"]}